
trabajo_final_pdm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800421c  0800421c  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004224  08004224  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004228  08004228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800422c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000048  08004274  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004274  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af25  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b61  00000000  00000000  0002af9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ee4  00000000  00000000  0002d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4aa  00000000  00000000  0004380c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008532d  00000000  00000000  0004dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2fe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c88  00000000  00000000  000d3038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000048 	.word	0x20000048
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040cc 	.word	0x080040cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000004c 	.word	0x2000004c
 80001d0:	080040cc 	.word	0x080040cc

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af02      	add	r7, sp, #8

  HAL_Init();
 80004e2:	f001 fb23 	bl	8001b2c <HAL_Init>
  SystemClock_Config();
 80004e6:	f000 f86f 	bl	80005c8 <SystemClock_Config>
  MX_GPIO_Init();
 80004ea:	f000 f8cd 	bl	8000688 <MX_GPIO_Init>

  delayInit(&delay_led1, duration_delay_led1);
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <main+0xb4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4619      	mov	r1, r3
 80004f4:	4827      	ldr	r0, [pc, #156]	; (8000594 <main+0xb8>)
 80004f6:	f000 fa8c 	bl	8000a12 <delayInit>
  delayInit(&delay_led2, duration_delay_led2);
 80004fa:	4b27      	ldr	r3, [pc, #156]	; (8000598 <main+0xbc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4619      	mov	r1, r3
 8000500:	4826      	ldr	r0, [pc, #152]	; (800059c <main+0xc0>)
 8000502:	f000 fa86 	bl	8000a12 <delayInit>
  delayInit(&delay_led3, duration_delay_led3);
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <main+0xc4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4619      	mov	r1, r3
 800050c:	4825      	ldr	r0, [pc, #148]	; (80005a4 <main+0xc8>)
 800050e:	f000 fa80 	bl	8000a12 <delayInit>

  if(uartInit())
 8000512:	f001 fa71 	bl	80019f8 <uartInit>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d003      	beq.n	8000524 <main+0x48>
  {
	  uartSendString_direct("\n\r***UART inicialized successfuly***\n\r\n\r");
 800051c:	4822      	ldr	r0, [pc, #136]	; (80005a8 <main+0xcc>)
 800051e:	f001 faef 	bl	8001b00 <uartSendString_direct>
 8000522:	e001      	b.n	8000528 <main+0x4c>
  }
  else{
	  Error_Handler();
 8000524:	f000 f906 	bl	8000734 <Error_Handler>
  }

  if(keypadInit(keypad1) && keypadInit(keypad2))
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <main+0xd0>)
 800052a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800052c:	f000 fa86 	bl	8000a3c <keypadInit>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d00a      	beq.n	800054c <main+0x70>
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <main+0xd4>)
 8000538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053a:	f000 fa7f 	bl	8000a3c <keypadInit>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d003      	beq.n	800054c <main+0x70>
  {
	  uartSendString_direct("\n\r***KEYPAD inicialized successfuly***\n\r\n\r");
 8000544:	481b      	ldr	r0, [pc, #108]	; (80005b4 <main+0xd8>)
 8000546:	f001 fadb 	bl	8001b00 <uartSendString_direct>
 800054a:	e001      	b.n	8000550 <main+0x74>
  }
  else{
	  Error_Handler();
 800054c:	f000 f8f2 	bl	8000734 <Error_Handler>



  while (1)
  {
	  keypressed1 = keypadRead(keypad1);
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0xd0>)
 8000552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000554:	f000 fbb8 	bl	8000cc8 <keypadRead>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <main+0xdc>)
 800055e:	701a      	strb	r2, [r3, #0]
	  keypressed2 = keypadReadUser(keypad2, kb_keypad2);
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <main+0xd4>)
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <main+0xe0>)
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000568:	f000 fe36 	bl	80011d8 <keypadReadUser>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <main+0xe4>)
 8000572:	701a      	strb	r2, [r3, #0]
	  //readKeypad(keypad1, kb_keypad1);
	  //uartSendString_direct("\n\r");

	  //uartSendString_direct("\n\r");
	  uartSendString_direct(&keypressed1);
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <main+0xdc>)
 8000576:	f001 fac3 	bl	8001b00 <uartSendString_direct>
	  uartSendString_direct(&keypressed2);
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0xe4>)
 800057c:	f001 fac0 	bl	8001b00 <uartSendString_direct>
	  HAL_GPIO_TogglePin(GPIOA, LED1);
 8000580:	2104      	movs	r1, #4
 8000582:	4810      	ldr	r0, [pc, #64]	; (80005c4 <main+0xe8>)
 8000584:	f002 f9ab 	bl	80028de <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000588:	20c8      	movs	r0, #200	; 0xc8
 800058a:	f001 fb41 	bl	8001c10 <HAL_Delay>
	  keypressed1 = keypadRead(keypad1);
 800058e:	e7df      	b.n	8000550 <main+0x74>
 8000590:	20000000 	.word	0x20000000
 8000594:	20000064 	.word	0x20000064
 8000598:	20000004 	.word	0x20000004
 800059c:	20000070 	.word	0x20000070
 80005a0:	20000008 	.word	0x20000008
 80005a4:	2000007c 	.word	0x2000007c
 80005a8:	080040e4 	.word	0x080040e4
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	2000001c 	.word	0x2000001c
 80005b4:	08004110 	.word	0x08004110
 80005b8:	20000088 	.word	0x20000088
 80005bc:	2000002c 	.word	0x2000002c
 80005c0:	20000089 	.word	0x20000089
 80005c4:	40020000 	.word	0x40020000

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fd70 	bl	80040bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemClock_Config+0xb8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xb8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xb8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <SystemClock_Config+0xbc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <SystemClock_Config+0xbc>)
 8000616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <SystemClock_Config+0xbc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f969 	bl	8002914 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000648:	f000 f874 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fbcc 	bl	8002e04 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000672:	f000 f85f 	bl	8000734 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_GPIO_Init+0xa0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a20      	ldr	r2, [pc, #128]	; (8000728 <MX_GPIO_Init+0xa0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_GPIO_Init+0xa0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_GPIO_Init+0xa0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a19      	ldr	r2, [pc, #100]	; (8000728 <MX_GPIO_Init+0xa0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_GPIO_Init+0xa0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	211c      	movs	r1, #28
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_GPIO_Init+0xa4>)
 80006dc:	f002 f8e6 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_GPIO_Init+0xa8>)
 80006e6:	f002 f8e1 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <MX_GPIO_Init+0xa4>)
 80006fe:	f001 ff39 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000702:	231c      	movs	r3, #28
 8000704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_GPIO_Init+0xa4>)
 800071a:	f001 ff2b 	bl	8002574 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
*/
}
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	40020400 	.word	0x40020400

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, ERROR_LED);
 800073c:	2101      	movs	r1, #1
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <Error_Handler+0x1c>)
 8000740:	f002 f8cd 	bl	80028de <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GPIOB, OK_LED, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	4801      	ldr	r0, [pc, #4]	; (8000750 <Error_Handler+0x1c>)
 800074a:	f002 f8af 	bl	80028ac <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOB, ERROR_LED);
 800074e:	e7f5      	b.n	800073c <Error_Handler+0x8>
 8000750:	40020400 	.word	0x40020400

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a4b      	ldr	r2, [pc, #300]	; (80008f0 <HAL_UART_MspInit+0x14c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	f040 8090 	bne.w	80008e8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <HAL_UART_MspInit+0x150>)
 80007ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d0:	4a48      	ldr	r2, [pc, #288]	; (80008f4 <HAL_UART_MspInit+0x150>)
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	6453      	str	r3, [r2, #68]	; 0x44
 80007d8:	4b46      	ldr	r3, [pc, #280]	; (80008f4 <HAL_UART_MspInit+0x150>)
 80007da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007dc:	f003 0320 	and.w	r3, r3, #32
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <HAL_UART_MspInit+0x150>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	4a41      	ldr	r2, [pc, #260]	; (80008f4 <HAL_UART_MspInit+0x150>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6313      	str	r3, [r2, #48]	; 0x30
 80007f4:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <HAL_UART_MspInit+0x150>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000800:	23c0      	movs	r3, #192	; 0xc0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000810:	2308      	movs	r3, #8
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4837      	ldr	r0, [pc, #220]	; (80008f8 <HAL_UART_MspInit+0x154>)
 800081c:	f001 feaa 	bl	8002574 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000820:	4b36      	ldr	r3, [pc, #216]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000822:	4a37      	ldr	r2, [pc, #220]	; (8000900 <HAL_UART_MspInit+0x15c>)
 8000824:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000828:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800082c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <HAL_UART_MspInit+0x158>)
 800083c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000840:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000842:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <HAL_UART_MspInit+0x158>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <HAL_UART_MspInit+0x158>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000860:	4826      	ldr	r0, [pc, #152]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000862:	f001 fb0b 	bl	8001e7c <HAL_DMA_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800086c:	f7ff ff62 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a22      	ldr	r2, [pc, #136]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000874:	639a      	str	r2, [r3, #56]	; 0x38
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <HAL_UART_MspInit+0x158>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <HAL_UART_MspInit+0x160>)
 800087e:	4a22      	ldr	r2, [pc, #136]	; (8000908 <HAL_UART_MspInit+0x164>)
 8000880:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <HAL_UART_MspInit+0x160>)
 8000884:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000888:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <HAL_UART_MspInit+0x160>)
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_UART_MspInit+0x160>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_UART_MspInit+0x160>)
 8000898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008be:	f001 fadd 	bl	8001e7c <HAL_DMA_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80008c8:	f7ff ff34 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <HAL_UART_MspInit+0x160>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2047      	movs	r0, #71	; 0x47
 80008de:	f001 fa96 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80008e2:	2047      	movs	r0, #71	; 0x47
 80008e4:	f001 faaf 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40011400 	.word	0x40011400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020800 	.word	0x40020800
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	40026428 	.word	0x40026428
 8000904:	200000ec 	.word	0x200000ec
 8000908:	400264a0 	.word	0x400264a0

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f001 f93a 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <DMA2_Stream1_IRQHandler+0x10>)
 8000966:	f001 fbc9 	bl	80020fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000008c 	.word	0x2000008c

08000974 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <DMA2_Stream6_IRQHandler+0x10>)
 800097a:	f001 fbbf 	bl	80020fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000ec 	.word	0x200000ec

08000988 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <USART6_IRQHandler+0x10>)
 800098e:	f002 fce9 	bl	8003364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000014c 	.word	0x2000014c

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c6:	490e      	ldr	r1, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009dc:	4c0b      	ldr	r4, [pc, #44]	; (8000a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ea:	f7ff ffd7 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f003 fb41 	bl	8004074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fd73 	bl	80004dc <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000a04:	0800422c 	.word	0x0800422c
  ldr r2, =_sbss
 8000a08:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000a0c:	20000194 	.word	0x20000194

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>

08000a12 <delayInit>:

#include "API_delay.h"
#include "stm32f4xx_hal.h"

void delayInit( delay_t * delay, tick_t duration)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
	if(delay == 0 || duration < 0 || duration > HAL_MAX_DELAY)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d100      	bne.n	8000a24 <delayInit+0x12>
		while(1);
 8000a22:	e7fe      	b.n	8000a22 <delayInit+0x10>
	delay->duration = duration;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	605a      	str	r2, [r3, #4]
	delay->running = 0;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	721a      	strb	r2, [r3, #8]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <keypadInit>:
 * @brief Esta función inicializa el teclado matricial 4x4
 * según la estructura definida por el usuario.
 */

bool_t keypadInit(keypad_t keypad)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	; 0x2c
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	463c      	mov	r4, r7
 8000a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (assert_ports(keypad))
 8000a48:	463b      	mov	r3, r7
 8000a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a4c:	f000 feda 	bl	8001804 <assert_ports>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 8132 	beq.w	8000cbc <keypadInit+0x280>
	{

	GPIO_InitTypeDef keypad_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
	/**
	 * @brief confirgurando los pines dispuestos por el usuario
	 * para las columnas del teclado matricial 4x4
	*/

	HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), GPIO_PIN_RESET);
 8000a68:	787b      	ldrb	r3, [r7, #1]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fe8e 	bl	800178c <port>
 8000a70:	4604      	mov	r4, r0
 8000a72:	783b      	ldrb	r3, [r7, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fe2d 	bl	80016d4 <pin>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4620      	mov	r0, r4
 8000a82:	f001 ff13 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.col_1_pin);
 8000a86:	783b      	ldrb	r3, [r7, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fe23 	bl	80016d4 <pin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
	keypad_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(port(keypad.col_1_port), &keypad_InitStruct);
 8000a9e:	787b      	ldrb	r3, [r7, #1]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fe73 	bl	800178c <port>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4610      	mov	r0, r2
 8000ab0:	f001 fd60 	bl	8002574 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), GPIO_PIN_RESET);
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fe68 	bl	800178c <port>
 8000abc:	4604      	mov	r4, r0
 8000abe:	78bb      	ldrb	r3, [r7, #2]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fe07 	bl	80016d4 <pin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4620      	mov	r0, r4
 8000ace:	f001 feed 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.col_2_pin);
 8000ad2:	78bb      	ldrb	r3, [r7, #2]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fdfd 	bl	80016d4 <pin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
	keypad_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(port(keypad.col_2_port), &keypad_InitStruct);
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fe4d 	bl	800178c <port>
 8000af2:	4602      	mov	r2, r0
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4610      	mov	r0, r2
 8000afc:	f001 fd3a 	bl	8002574 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), GPIO_PIN_RESET);
 8000b00:	797b      	ldrb	r3, [r7, #5]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fe42 	bl	800178c <port>
 8000b08:	4604      	mov	r4, r0
 8000b0a:	793b      	ldrb	r3, [r7, #4]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fde1 	bl	80016d4 <pin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f001 fec7 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.col_3_pin);
 8000b1e:	793b      	ldrb	r3, [r7, #4]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fdd7 	bl	80016d4 <pin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
	keypad_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(port(keypad.col_3_port), &keypad_InitStruct);
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fe27 	bl	800178c <port>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4610      	mov	r0, r2
 8000b48:	f001 fd14 	bl	8002574 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), GPIO_PIN_RESET);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fe1c 	bl	800178c <port>
 8000b54:	4604      	mov	r4, r0
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fdbb 	bl	80016d4 <pin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	4620      	mov	r0, r4
 8000b66:	f001 fea1 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.col_4_pin);
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fdb1 	bl	80016d4 <pin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
	keypad_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(port(keypad.col_4_port), &keypad_InitStruct);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fe01 	bl	800178c <port>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f001 fcee 	bl	8002574 <HAL_GPIO_Init>
	/**
	 * @brief confirgurando los pines dispuestos por el usuario
	 * para las filas del teclado matricial 4x4
	 */

	HAL_GPIO_WritePin(port(keypad.row_A_port), pin(keypad.row_A_pin), GPIO_PIN_RESET);
 8000b98:	7a7b      	ldrb	r3, [r7, #9]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fdf6 	bl	800178c <port>
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	7a3b      	ldrb	r3, [r7, #8]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fd95 	bl	80016d4 <pin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f001 fe7b 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.row_A_pin);
 8000bb6:	7a3b      	ldrb	r3, [r7, #8]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fd8b 	bl	80016d4 <pin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(port(keypad.row_A_port), &keypad_InitStruct);
 8000bca:	7a7b      	ldrb	r3, [r7, #9]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fddd 	bl	800178c <port>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	f001 fcca 	bl	8002574 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port(keypad.row_B_port), pin(keypad.row_B_pin), GPIO_PIN_RESET);
 8000be0:	7afb      	ldrb	r3, [r7, #11]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fdd2 	bl	800178c <port>
 8000be8:	4604      	mov	r4, r0
 8000bea:	7abb      	ldrb	r3, [r7, #10]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fd71 	bl	80016d4 <pin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f001 fe57 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.row_B_pin);
 8000bfe:	7abb      	ldrb	r3, [r7, #10]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fd67 	bl	80016d4 <pin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_PULLDOWN;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(port(keypad.row_B_port), &keypad_InitStruct);
 8000c12:	7afb      	ldrb	r3, [r7, #11]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 fdb9 	bl	800178c <port>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4610      	mov	r0, r2
 8000c24:	f001 fca6 	bl	8002574 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port(keypad.row_C_port), pin(keypad.row_C_pin), GPIO_PIN_RESET);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fdae 	bl	800178c <port>
 8000c30:	4604      	mov	r4, r0
 8000c32:	7b3b      	ldrb	r3, [r7, #12]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fd4d 	bl	80016d4 <pin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4620      	mov	r0, r4
 8000c42:	f001 fe33 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.row_C_pin);
 8000c46:	7b3b      	ldrb	r3, [r7, #12]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fd43 	bl	80016d4 <pin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_PULLDOWN;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(port(keypad.row_C_port), &keypad_InitStruct);
 8000c5a:	7b7b      	ldrb	r3, [r7, #13]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fd95 	bl	800178c <port>
 8000c62:	4602      	mov	r2, r0
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f001 fc82 	bl	8002574 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port(keypad.row_D_port), pin(keypad.row_D_pin), GPIO_PIN_RESET);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fd8a 	bl	800178c <port>
 8000c78:	4604      	mov	r4, r0
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fd29 	bl	80016d4 <pin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f001 fe0f 	bl	80028ac <HAL_GPIO_WritePin>
	keypad_InitStruct.Pin = pin(keypad.row_D_pin);
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fd1f 	bl	80016d4 <pin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	617b      	str	r3, [r7, #20]
	keypad_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
	keypad_InitStruct.Pull = GPIO_PULLDOWN;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(port(keypad.row_D_port), &keypad_InitStruct);
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fd71 	bl	800178c <port>
 8000caa:	4602      	mov	r2, r0
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	f001 fc5e 	bl	8002574 <HAL_GPIO_Init>


	return true;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <keypadInit+0x282>
	}else{return false;}
 8000cbc:	2300      	movs	r3, #0

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	372c      	adds	r7, #44	; 0x2c
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd90      	pop	{r4, r7, pc}
	...

08000cc8 <keypadRead>:
/**
 * @brief Esta función lee el teclado correspondiente
 */

tecla_t keypadRead(keypad_t keypad)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b08b      	sub	sp, #44	; 0x2c
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	463c      	mov	r4, r7
 8000cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	tecla_t pressed_key = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	keyboard_t keyboard[4][4] = {		{'7', '8', '9', '/'},
 8000cda:	4bd2      	ldr	r3, [pc, #840]	; (8001024 <keypadRead+0x35c>)
 8000cdc:	f107 0414 	add.w	r4, r7, #20
 8000ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
										{'4', '5', '6', '*'},
										{'1', '2', '3', '-'},
										{'O', '0', '=', '+'}};

	for(uint8_t i = 0; i < 4; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000cec:	e268      	b.n	80011c0 <keypadRead+0x4f8>
	{
		switch (i)
 8000cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	f200 8255 	bhi.w	80011a2 <keypadRead+0x4da>
 8000cf8:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <keypadRead+0x38>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000e35 	.word	0x08000e35
 8000d08:	08000f59 	.word	0x08000f59
 8000d0c:	08001081 	.word	0x08001081
		{
		case COL_1:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 1);
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fd3a 	bl	800178c <port>
 8000d18:	4604      	mov	r4, r0
 8000d1a:	783b      	ldrb	r3, [r7, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fcd9 	bl	80016d4 <pin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2201      	movs	r2, #1
 8000d26:	4619      	mov	r1, r3
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f001 fdbf 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 0);
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fd2b 	bl	800178c <port>
 8000d36:	4604      	mov	r4, r0
 8000d38:	78bb      	ldrb	r3, [r7, #2]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fcca 	bl	80016d4 <pin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4620      	mov	r0, r4
 8000d48:	f001 fdb0 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 0);
 8000d4c:	797b      	ldrb	r3, [r7, #5]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fd1c 	bl	800178c <port>
 8000d54:	4604      	mov	r4, r0
 8000d56:	793b      	ldrb	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fcbb 	bl	80016d4 <pin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2200      	movs	r2, #0
 8000d62:	4619      	mov	r1, r3
 8000d64:	4620      	mov	r0, r4
 8000d66:	f001 fda1 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 0);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fd0d 	bl	800178c <port>
 8000d72:	4604      	mov	r4, r0
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fcac 	bl	80016d4 <pin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4620      	mov	r0, r4
 8000d84:	f001 fd92 	bl	80028ac <HAL_GPIO_WritePin>



			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 8000d88:	7a7b      	ldrb	r3, [r7, #9]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fcfe 	bl	800178c <port>
 8000d90:	4604      	mov	r4, r0
 8000d92:	7a3b      	ldrb	r3, [r7, #8]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fc9d 	bl	80016d4 <pin>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f001 fd6c 	bl	800287c <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d103      	bne.n	8000db2 <keypadRead+0xea>
			{
				pressed_key = keyboard[0][0];
 8000daa:	7d3b      	ldrb	r3, [r7, #20]
 8000dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][0];
			}

		break;
 8000db0:	e1fa      	b.n	80011a8 <keypadRead+0x4e0>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fce9 	bl	800178c <port>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	7abb      	ldrb	r3, [r7, #10]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fc88 	bl	80016d4 <pin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f001 fd57 	bl	800287c <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d103      	bne.n	8000ddc <keypadRead+0x114>
				pressed_key = keyboard[1][0];
 8000dd4:	7e3b      	ldrb	r3, [r7, #24]
 8000dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8000dda:	e1e5      	b.n	80011a8 <keypadRead+0x4e0>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 8000ddc:	7b7b      	ldrb	r3, [r7, #13]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fcd4 	bl	800178c <port>
 8000de4:	4604      	mov	r4, r0
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fc73 	bl	80016d4 <pin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4620      	mov	r0, r4
 8000df4:	f001 fd42 	bl	800287c <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d103      	bne.n	8000e06 <keypadRead+0x13e>
				pressed_key = keyboard[2][0];
 8000dfe:	7f3b      	ldrb	r3, [r7, #28]
 8000e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8000e04:	e1d0      	b.n	80011a8 <keypadRead+0x4e0>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fcbf 	bl	800178c <port>
 8000e0e:	4604      	mov	r4, r0
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fc5e 	bl	80016d4 <pin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f001 fd2d 	bl	800287c <HAL_GPIO_ReadPin>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	f040 81bf 	bne.w	80011a8 <keypadRead+0x4e0>
				pressed_key = keyboard[3][0];
 8000e2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8000e32:	e1b9      	b.n	80011a8 <keypadRead+0x4e0>

		case COL_2:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 0);
 8000e34:	787b      	ldrb	r3, [r7, #1]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fca8 	bl	800178c <port>
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	783b      	ldrb	r3, [r7, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fc47 	bl	80016d4 <pin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f001 fd2d 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 1);
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fc99 	bl	800178c <port>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fc38 	bl	80016d4 <pin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2201      	movs	r2, #1
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f001 fd1e 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 0);
 8000e70:	797b      	ldrb	r3, [r7, #5]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fc8a 	bl	800178c <port>
 8000e78:	4604      	mov	r4, r0
 8000e7a:	793b      	ldrb	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fc29 	bl	80016d4 <pin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f001 fd0f 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 0);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fc7b 	bl	800178c <port>
 8000e96:	4604      	mov	r4, r0
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fc1a 	bl	80016d4 <pin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f001 fd00 	bl	80028ac <HAL_GPIO_WritePin>


			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 8000eac:	7a7b      	ldrb	r3, [r7, #9]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc6c 	bl	800178c <port>
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	7a3b      	ldrb	r3, [r7, #8]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fc0b 	bl	80016d4 <pin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f001 fcda 	bl	800287c <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d103      	bne.n	8000ed6 <keypadRead+0x20e>
			{
				pressed_key = keyboard[0][1];
 8000ece:	7d7b      	ldrb	r3, [r7, #21]
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][1];
			}

		break;
 8000ed4:	e16a      	b.n	80011ac <keypadRead+0x4e4>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fc57 	bl	800178c <port>
 8000ede:	4604      	mov	r4, r0
 8000ee0:	7abb      	ldrb	r3, [r7, #10]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fbf6 	bl	80016d4 <pin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4619      	mov	r1, r3
 8000eec:	4620      	mov	r0, r4
 8000eee:	f001 fcc5 	bl	800287c <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d103      	bne.n	8000f00 <keypadRead+0x238>
				pressed_key = keyboard[1][1];
 8000ef8:	7e7b      	ldrb	r3, [r7, #25]
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8000efe:	e155      	b.n	80011ac <keypadRead+0x4e4>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fc42 	bl	800178c <port>
 8000f08:	4604      	mov	r4, r0
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fbe1 	bl	80016d4 <pin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4619      	mov	r1, r3
 8000f16:	4620      	mov	r0, r4
 8000f18:	f001 fcb0 	bl	800287c <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d103      	bne.n	8000f2a <keypadRead+0x262>
				pressed_key = keyboard[2][1];
 8000f22:	7f7b      	ldrb	r3, [r7, #29]
 8000f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8000f28:	e140      	b.n	80011ac <keypadRead+0x4e4>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fc2d 	bl	800178c <port>
 8000f32:	4604      	mov	r4, r0
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fbcc 	bl	80016d4 <pin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4620      	mov	r0, r4
 8000f42:	f001 fc9b 	bl	800287c <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	f040 812f 	bne.w	80011ac <keypadRead+0x4e4>
				pressed_key = keyboard[3][1];
 8000f4e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8000f56:	e129      	b.n	80011ac <keypadRead+0x4e4>

		case COL_3:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 0);
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fc16 	bl	800178c <port>
 8000f60:	4604      	mov	r4, r0
 8000f62:	783b      	ldrb	r3, [r7, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fbb5 	bl	80016d4 <pin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4620      	mov	r0, r4
 8000f72:	f001 fc9b 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 0);
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fc07 	bl	800178c <port>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	78bb      	ldrb	r3, [r7, #2]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fba6 	bl	80016d4 <pin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f001 fc8c 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 1);
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fbf8 	bl	800178c <port>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fb97 	bl	80016d4 <pin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	4620      	mov	r0, r4
 8000fae:	f001 fc7d 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 0);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fbe9 	bl	800178c <port>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fb88 	bl	80016d4 <pin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f001 fc6e 	bl	80028ac <HAL_GPIO_WritePin>



			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 8000fd0:	7a7b      	ldrb	r3, [r7, #9]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fbda 	bl	800178c <port>
 8000fd8:	4604      	mov	r4, r0
 8000fda:	7a3b      	ldrb	r3, [r7, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fb79 	bl	80016d4 <pin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f001 fc48 	bl	800287c <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d103      	bne.n	8000ffa <keypadRead+0x332>
			{
				pressed_key = keyboard[0][2];
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][2];
			}

		break;
 8000ff8:	e0da      	b.n	80011b0 <keypadRead+0x4e8>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fbc5 	bl	800178c <port>
 8001002:	4604      	mov	r4, r0
 8001004:	7abb      	ldrb	r3, [r7, #10]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fb64 	bl	80016d4 <pin>
 800100c:	4603      	mov	r3, r0
 800100e:	4619      	mov	r1, r3
 8001010:	4620      	mov	r0, r4
 8001012:	f001 fc33 	bl	800287c <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <keypadRead+0x360>
				pressed_key = keyboard[1][2];
 800101c:	7ebb      	ldrb	r3, [r7, #26]
 800101e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8001022:	e0c5      	b.n	80011b0 <keypadRead+0x4e8>
 8001024:	0800413c 	.word	0x0800413c
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fbae 	bl	800178c <port>
 8001030:	4604      	mov	r4, r0
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fb4d 	bl	80016d4 <pin>
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	4620      	mov	r0, r4
 8001040:	f001 fc1c 	bl	800287c <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d103      	bne.n	8001052 <keypadRead+0x38a>
				pressed_key = keyboard[2][2];
 800104a:	7fbb      	ldrb	r3, [r7, #30]
 800104c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8001050:	e0ae      	b.n	80011b0 <keypadRead+0x4e8>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fb99 	bl	800178c <port>
 800105a:	4604      	mov	r4, r0
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fb38 	bl	80016d4 <pin>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	4620      	mov	r0, r4
 800106a:	f001 fc07 	bl	800287c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	f040 809d 	bne.w	80011b0 <keypadRead+0x4e8>
				pressed_key = keyboard[3][2];
 8001076:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800107a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 800107e:	e097      	b.n	80011b0 <keypadRead+0x4e8>

		case COL_4:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 0);
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fb82 	bl	800178c <port>
 8001088:	4604      	mov	r4, r0
 800108a:	783b      	ldrb	r3, [r7, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fb21 	bl	80016d4 <pin>
 8001092:	4603      	mov	r3, r0
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4620      	mov	r0, r4
 800109a:	f001 fc07 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 0);
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fb73 	bl	800178c <port>
 80010a6:	4604      	mov	r4, r0
 80010a8:	78bb      	ldrb	r3, [r7, #2]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fb12 	bl	80016d4 <pin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4620      	mov	r0, r4
 80010b8:	f001 fbf8 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 0);
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fb64 	bl	800178c <port>
 80010c4:	4604      	mov	r4, r0
 80010c6:	793b      	ldrb	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fb03 	bl	80016d4 <pin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4620      	mov	r0, r4
 80010d6:	f001 fbe9 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 1);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fb55 	bl	800178c <port>
 80010e2:	4604      	mov	r4, r0
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 faf4 	bl	80016d4 <pin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	4620      	mov	r0, r4
 80010f4:	f001 fbda 	bl	80028ac <HAL_GPIO_WritePin>


			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 80010f8:	7a7b      	ldrb	r3, [r7, #9]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fb46 	bl	800178c <port>
 8001100:	4604      	mov	r4, r0
 8001102:	7a3b      	ldrb	r3, [r7, #8]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fae5 	bl	80016d4 <pin>
 800110a:	4603      	mov	r3, r0
 800110c:	4619      	mov	r1, r3
 800110e:	4620      	mov	r0, r4
 8001110:	f001 fbb4 	bl	800287c <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d103      	bne.n	8001122 <keypadRead+0x45a>
			{
				pressed_key = keyboard[0][3];
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][3];
			}

		break;
 8001120:	e048      	b.n	80011b4 <keypadRead+0x4ec>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 8001122:	7afb      	ldrb	r3, [r7, #11]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fb31 	bl	800178c <port>
 800112a:	4604      	mov	r4, r0
 800112c:	7abb      	ldrb	r3, [r7, #10]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fad0 	bl	80016d4 <pin>
 8001134:	4603      	mov	r3, r0
 8001136:	4619      	mov	r1, r3
 8001138:	4620      	mov	r0, r4
 800113a:	f001 fb9f 	bl	800287c <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d103      	bne.n	800114c <keypadRead+0x484>
				pressed_key = keyboard[1][3];
 8001144:	7efb      	ldrb	r3, [r7, #27]
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 800114a:	e033      	b.n	80011b4 <keypadRead+0x4ec>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fb1c 	bl	800178c <port>
 8001154:	4604      	mov	r4, r0
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fabb 	bl	80016d4 <pin>
 800115e:	4603      	mov	r3, r0
 8001160:	4619      	mov	r1, r3
 8001162:	4620      	mov	r0, r4
 8001164:	f001 fb8a 	bl	800287c <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d103      	bne.n	8001176 <keypadRead+0x4ae>
				pressed_key = keyboard[2][3];
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8001174:	e01e      	b.n	80011b4 <keypadRead+0x4ec>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fb07 	bl	800178c <port>
 800117e:	4604      	mov	r4, r0
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 faa6 	bl	80016d4 <pin>
 8001188:	4603      	mov	r3, r0
 800118a:	4619      	mov	r1, r3
 800118c:	4620      	mov	r0, r4
 800118e:	f001 fb75 	bl	800287c <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d10d      	bne.n	80011b4 <keypadRead+0x4ec>
				pressed_key = keyboard[3][3];
 8001198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 80011a0:	e008      	b.n	80011b4 <keypadRead+0x4ec>

		default:
			return pressed_key;
 80011a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a6:	e012      	b.n	80011ce <keypadRead+0x506>
		break;
 80011a8:	bf00      	nop
 80011aa:	e004      	b.n	80011b6 <keypadRead+0x4ee>
		break;
 80011ac:	bf00      	nop
 80011ae:	e002      	b.n	80011b6 <keypadRead+0x4ee>
		break;
 80011b0:	bf00      	nop
 80011b2:	e000      	b.n	80011b6 <keypadRead+0x4ee>
		break;
 80011b4:	bf00      	nop
	for(uint8_t i = 0; i < 4; i++)
 80011b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	f67f ad92 	bls.w	8000cee <keypadRead+0x26>

		}//END SWITCH/CASE
	}//END FOR

return pressed_key;
 80011ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}//END keypadRead()
 80011ce:	4618      	mov	r0, r3
 80011d0:	372c      	adds	r7, #44	; 0x2c
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop

080011d8 <keypadReadUser>:

tecla_t keypadReadUser(keypad_t keypad, keyboard_t keyboard[4][4])
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	463c      	mov	r4, r7
 80011e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	tecla_t pressed_key = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i = 0; i < 4; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	75bb      	strb	r3, [r7, #22]
 80011ec:	e269      	b.n	80016c2 <keypadReadUser+0x4ea>
	{
		switch (i)
 80011ee:	7dbb      	ldrb	r3, [r7, #22]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	f200 825a 	bhi.w	80016aa <keypadReadUser+0x4d2>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <keypadReadUser+0x24>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	08001335 	.word	0x08001335
 8001204:	0800145d 	.word	0x0800145d
 8001208:	08001585 	.word	0x08001585
		{
		case COL_1:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 1);
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fabc 	bl	800178c <port>
 8001214:	4604      	mov	r4, r0
 8001216:	783b      	ldrb	r3, [r7, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fa5b 	bl	80016d4 <pin>
 800121e:	4603      	mov	r3, r0
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	4620      	mov	r0, r4
 8001226:	f001 fb41 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 0);
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 faad 	bl	800178c <port>
 8001232:	4604      	mov	r4, r0
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fa4c 	bl	80016d4 <pin>
 800123c:	4603      	mov	r3, r0
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	4620      	mov	r0, r4
 8001244:	f001 fb32 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 0);
 8001248:	797b      	ldrb	r3, [r7, #5]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fa9e 	bl	800178c <port>
 8001250:	4604      	mov	r4, r0
 8001252:	793b      	ldrb	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fa3d 	bl	80016d4 <pin>
 800125a:	4603      	mov	r3, r0
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4620      	mov	r0, r4
 8001262:	f001 fb23 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 0);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fa8f 	bl	800178c <port>
 800126e:	4604      	mov	r4, r0
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fa2e 	bl	80016d4 <pin>
 8001278:	4603      	mov	r3, r0
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	4620      	mov	r0, r4
 8001280:	f001 fb14 	bl	80028ac <HAL_GPIO_WritePin>



			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 8001284:	7a7b      	ldrb	r3, [r7, #9]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fa80 	bl	800178c <port>
 800128c:	4604      	mov	r4, r0
 800128e:	7a3b      	ldrb	r3, [r7, #8]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fa1f 	bl	80016d4 <pin>
 8001296:	4603      	mov	r3, r0
 8001298:	4619      	mov	r1, r3
 800129a:	4620      	mov	r0, r4
 800129c:	f001 faee 	bl	800287c <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d103      	bne.n	80012ae <keypadReadUser+0xd6>
			{
				pressed_key = keyboard[0][0];
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	75fb      	strb	r3, [r7, #23]
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][0];
			}

		break;
 80012ac:	e1ff      	b.n	80016ae <keypadReadUser+0x4d6>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fa6b 	bl	800178c <port>
 80012b6:	4604      	mov	r4, r0
 80012b8:	7abb      	ldrb	r3, [r7, #10]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fa0a 	bl	80016d4 <pin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f001 fad9 	bl	800287c <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d104      	bne.n	80012da <keypadReadUser+0x102>
				pressed_key = keyboard[1][0];
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	3304      	adds	r3, #4
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	75fb      	strb	r3, [r7, #23]
		break;
 80012d8:	e1e9      	b.n	80016ae <keypadReadUser+0x4d6>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 80012da:	7b7b      	ldrb	r3, [r7, #13]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fa55 	bl	800178c <port>
 80012e2:	4604      	mov	r4, r0
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f9f4 	bl	80016d4 <pin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f001 fac3 	bl	800287c <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d104      	bne.n	8001306 <keypadReadUser+0x12e>
				pressed_key = keyboard[2][0];
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	3308      	adds	r3, #8
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	75fb      	strb	r3, [r7, #23]
		break;
 8001304:	e1d3      	b.n	80016ae <keypadReadUser+0x4d6>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fa3f 	bl	800178c <port>
 800130e:	4604      	mov	r4, r0
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f9de 	bl	80016d4 <pin>
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	4620      	mov	r0, r4
 800131e:	f001 faad 	bl	800287c <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	f040 81c2 	bne.w	80016ae <keypadReadUser+0x4d6>
				pressed_key = keyboard[3][0];
 800132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132c:	330c      	adds	r3, #12
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	75fb      	strb	r3, [r7, #23]
		break;
 8001332:	e1bc      	b.n	80016ae <keypadReadUser+0x4d6>

		case COL_2:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 0);
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fa28 	bl	800178c <port>
 800133c:	4604      	mov	r4, r0
 800133e:	783b      	ldrb	r3, [r7, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f9c7 	bl	80016d4 <pin>
 8001346:	4603      	mov	r3, r0
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4620      	mov	r0, r4
 800134e:	f001 faad 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 1);
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fa19 	bl	800178c <port>
 800135a:	4604      	mov	r4, r0
 800135c:	78bb      	ldrb	r3, [r7, #2]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f9b8 	bl	80016d4 <pin>
 8001364:	4603      	mov	r3, r0
 8001366:	2201      	movs	r2, #1
 8001368:	4619      	mov	r1, r3
 800136a:	4620      	mov	r0, r4
 800136c:	f001 fa9e 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 0);
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fa0a 	bl	800178c <port>
 8001378:	4604      	mov	r4, r0
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f9a9 	bl	80016d4 <pin>
 8001382:	4603      	mov	r3, r0
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	4620      	mov	r0, r4
 800138a:	f001 fa8f 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 0);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f9fb 	bl	800178c <port>
 8001396:	4604      	mov	r4, r0
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f99a 	bl	80016d4 <pin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2200      	movs	r2, #0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4620      	mov	r0, r4
 80013a8:	f001 fa80 	bl	80028ac <HAL_GPIO_WritePin>


			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 80013ac:	7a7b      	ldrb	r3, [r7, #9]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f9ec 	bl	800178c <port>
 80013b4:	4604      	mov	r4, r0
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f98b 	bl	80016d4 <pin>
 80013be:	4603      	mov	r3, r0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4620      	mov	r0, r4
 80013c4:	f001 fa5a 	bl	800287c <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d103      	bne.n	80013d6 <keypadReadUser+0x1fe>
			{
				pressed_key = keyboard[0][1];
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	75fb      	strb	r3, [r7, #23]
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][1];
			}

		break;
 80013d4:	e16d      	b.n	80016b2 <keypadReadUser+0x4da>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f9d7 	bl	800178c <port>
 80013de:	4604      	mov	r4, r0
 80013e0:	7abb      	ldrb	r3, [r7, #10]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f976 	bl	80016d4 <pin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4619      	mov	r1, r3
 80013ec:	4620      	mov	r0, r4
 80013ee:	f001 fa45 	bl	800287c <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d104      	bne.n	8001402 <keypadReadUser+0x22a>
				pressed_key = keyboard[1][1];
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	3304      	adds	r3, #4
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	75fb      	strb	r3, [r7, #23]
		break;
 8001400:	e157      	b.n	80016b2 <keypadReadUser+0x4da>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 8001402:	7b7b      	ldrb	r3, [r7, #13]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f9c1 	bl	800178c <port>
 800140a:	4604      	mov	r4, r0
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f960 	bl	80016d4 <pin>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	4620      	mov	r0, r4
 800141a:	f001 fa2f 	bl	800287c <HAL_GPIO_ReadPin>
 800141e:	4603      	mov	r3, r0
 8001420:	2b01      	cmp	r3, #1
 8001422:	d104      	bne.n	800142e <keypadReadUser+0x256>
				pressed_key = keyboard[2][1];
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	3308      	adds	r3, #8
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	75fb      	strb	r3, [r7, #23]
		break;
 800142c:	e141      	b.n	80016b2 <keypadReadUser+0x4da>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f9ab 	bl	800178c <port>
 8001436:	4604      	mov	r4, r0
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f94a 	bl	80016d4 <pin>
 8001440:	4603      	mov	r3, r0
 8001442:	4619      	mov	r1, r3
 8001444:	4620      	mov	r0, r4
 8001446:	f001 fa19 	bl	800287c <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	f040 8130 	bne.w	80016b2 <keypadReadUser+0x4da>
				pressed_key = keyboard[3][1];
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	330c      	adds	r3, #12
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	75fb      	strb	r3, [r7, #23]
		break;
 800145a:	e12a      	b.n	80016b2 <keypadReadUser+0x4da>

		case COL_3:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 0);
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f994 	bl	800178c <port>
 8001464:	4604      	mov	r4, r0
 8001466:	783b      	ldrb	r3, [r7, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f933 	bl	80016d4 <pin>
 800146e:	4603      	mov	r3, r0
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	4620      	mov	r0, r4
 8001476:	f001 fa19 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 0);
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f985 	bl	800178c <port>
 8001482:	4604      	mov	r4, r0
 8001484:	78bb      	ldrb	r3, [r7, #2]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f924 	bl	80016d4 <pin>
 800148c:	4603      	mov	r3, r0
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	4620      	mov	r0, r4
 8001494:	f001 fa0a 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 1);
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f976 	bl	800178c <port>
 80014a0:	4604      	mov	r4, r0
 80014a2:	793b      	ldrb	r3, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f915 	bl	80016d4 <pin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2201      	movs	r2, #1
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f001 f9fb 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 0);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f967 	bl	800178c <port>
 80014be:	4604      	mov	r4, r0
 80014c0:	79bb      	ldrb	r3, [r7, #6]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f906 	bl	80016d4 <pin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4620      	mov	r0, r4
 80014d0:	f001 f9ec 	bl	80028ac <HAL_GPIO_WritePin>



			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 80014d4:	7a7b      	ldrb	r3, [r7, #9]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f958 	bl	800178c <port>
 80014dc:	4604      	mov	r4, r0
 80014de:	7a3b      	ldrb	r3, [r7, #8]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f8f7 	bl	80016d4 <pin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f001 f9c6 	bl	800287c <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d103      	bne.n	80014fe <keypadReadUser+0x326>
			{
				pressed_key = keyboard[0][2];
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	75fb      	strb	r3, [r7, #23]
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][2];
			}

		break;
 80014fc:	e0db      	b.n	80016b6 <keypadReadUser+0x4de>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	4618      	mov	r0, r3
 8001502:	f000 f943 	bl	800178c <port>
 8001506:	4604      	mov	r4, r0
 8001508:	7abb      	ldrb	r3, [r7, #10]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f8e2 	bl	80016d4 <pin>
 8001510:	4603      	mov	r3, r0
 8001512:	4619      	mov	r1, r3
 8001514:	4620      	mov	r0, r4
 8001516:	f001 f9b1 	bl	800287c <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b01      	cmp	r3, #1
 800151e:	d104      	bne.n	800152a <keypadReadUser+0x352>
				pressed_key = keyboard[1][2];
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	3304      	adds	r3, #4
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	75fb      	strb	r3, [r7, #23]
		break;
 8001528:	e0c5      	b.n	80016b6 <keypadReadUser+0x4de>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 800152a:	7b7b      	ldrb	r3, [r7, #13]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f92d 	bl	800178c <port>
 8001532:	4604      	mov	r4, r0
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f8cc 	bl	80016d4 <pin>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	4620      	mov	r0, r4
 8001542:	f001 f99b 	bl	800287c <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
 8001548:	2b01      	cmp	r3, #1
 800154a:	d104      	bne.n	8001556 <keypadReadUser+0x37e>
				pressed_key = keyboard[2][2];
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	3308      	adds	r3, #8
 8001550:	789b      	ldrb	r3, [r3, #2]
 8001552:	75fb      	strb	r3, [r7, #23]
		break;
 8001554:	e0af      	b.n	80016b6 <keypadReadUser+0x4de>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f917 	bl	800178c <port>
 800155e:	4604      	mov	r4, r0
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f8b6 	bl	80016d4 <pin>
 8001568:	4603      	mov	r3, r0
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f001 f985 	bl	800287c <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	f040 809e 	bne.w	80016b6 <keypadReadUser+0x4de>
				pressed_key = keyboard[3][2];
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	330c      	adds	r3, #12
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	75fb      	strb	r3, [r7, #23]
		break;
 8001582:	e098      	b.n	80016b6 <keypadReadUser+0x4de>

		case COL_4:
			HAL_GPIO_WritePin(port(keypad.col_1_port), pin(keypad.col_1_pin), 0);
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f900 	bl	800178c <port>
 800158c:	4604      	mov	r4, r0
 800158e:	783b      	ldrb	r3, [r7, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f89f 	bl	80016d4 <pin>
 8001596:	4603      	mov	r3, r0
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4620      	mov	r0, r4
 800159e:	f001 f985 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_2_port), pin(keypad.col_2_pin), 0);
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f8f1 	bl	800178c <port>
 80015aa:	4604      	mov	r4, r0
 80015ac:	78bb      	ldrb	r3, [r7, #2]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f890 	bl	80016d4 <pin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	4620      	mov	r0, r4
 80015bc:	f001 f976 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_3_port), pin(keypad.col_3_pin), 0);
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f8e2 	bl	800178c <port>
 80015c8:	4604      	mov	r4, r0
 80015ca:	793b      	ldrb	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f881 	bl	80016d4 <pin>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f001 f967 	bl	80028ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(port(keypad.col_4_port), pin(keypad.col_4_pin), 1);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f8d3 	bl	800178c <port>
 80015e6:	4604      	mov	r4, r0
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f872 	bl	80016d4 <pin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2201      	movs	r2, #1
 80015f4:	4619      	mov	r1, r3
 80015f6:	4620      	mov	r0, r4
 80015f8:	f001 f958 	bl	80028ac <HAL_GPIO_WritePin>


			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_A_port), pin(keypad.row_A_pin)) )
 80015fc:	7a7b      	ldrb	r3, [r7, #9]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f8c4 	bl	800178c <port>
 8001604:	4604      	mov	r4, r0
 8001606:	7a3b      	ldrb	r3, [r7, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f863 	bl	80016d4 <pin>
 800160e:	4603      	mov	r3, r0
 8001610:	4619      	mov	r1, r3
 8001612:	4620      	mov	r0, r4
 8001614:	f001 f932 	bl	800287c <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d103      	bne.n	8001626 <keypadReadUser+0x44e>
			{
				pressed_key = keyboard[0][3];
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	78db      	ldrb	r3, [r3, #3]
 8001622:	75fb      	strb	r3, [r7, #23]
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
			{
				pressed_key = keyboard[3][3];
			}

		break;
 8001624:	e049      	b.n	80016ba <keypadReadUser+0x4e2>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_B_port), pin(keypad.row_B_pin)) )
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f8af 	bl	800178c <port>
 800162e:	4604      	mov	r4, r0
 8001630:	7abb      	ldrb	r3, [r7, #10]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f84e 	bl	80016d4 <pin>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f001 f91d 	bl	800287c <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b01      	cmp	r3, #1
 8001646:	d104      	bne.n	8001652 <keypadReadUser+0x47a>
				pressed_key = keyboard[1][3];
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	3304      	adds	r3, #4
 800164c:	78db      	ldrb	r3, [r3, #3]
 800164e:	75fb      	strb	r3, [r7, #23]
		break;
 8001650:	e033      	b.n	80016ba <keypadReadUser+0x4e2>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_C_port), pin(keypad.row_C_pin)))
 8001652:	7b7b      	ldrb	r3, [r7, #13]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f899 	bl	800178c <port>
 800165a:	4604      	mov	r4, r0
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f838 	bl	80016d4 <pin>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	4620      	mov	r0, r4
 800166a:	f001 f907 	bl	800287c <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	2b01      	cmp	r3, #1
 8001672:	d104      	bne.n	800167e <keypadReadUser+0x4a6>
				pressed_key = keyboard[2][3];
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	3308      	adds	r3, #8
 8001678:	78db      	ldrb	r3, [r3, #3]
 800167a:	75fb      	strb	r3, [r7, #23]
		break;
 800167c:	e01d      	b.n	80016ba <keypadReadUser+0x4e2>
			if( 1 == HAL_GPIO_ReadPin(port(keypad.row_D_port), pin(keypad.row_D_pin)))
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f883 	bl	800178c <port>
 8001686:	4604      	mov	r4, r0
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f822 	bl	80016d4 <pin>
 8001690:	4603      	mov	r3, r0
 8001692:	4619      	mov	r1, r3
 8001694:	4620      	mov	r0, r4
 8001696:	f001 f8f1 	bl	800287c <HAL_GPIO_ReadPin>
 800169a:	4603      	mov	r3, r0
 800169c:	2b01      	cmp	r3, #1
 800169e:	d10c      	bne.n	80016ba <keypadReadUser+0x4e2>
				pressed_key = keyboard[3][3];
 80016a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a2:	330c      	adds	r3, #12
 80016a4:	78db      	ldrb	r3, [r3, #3]
 80016a6:	75fb      	strb	r3, [r7, #23]
		break;
 80016a8:	e007      	b.n	80016ba <keypadReadUser+0x4e2>

		default:
			return pressed_key;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	e00e      	b.n	80016cc <keypadReadUser+0x4f4>
		break;
 80016ae:	bf00      	nop
 80016b0:	e004      	b.n	80016bc <keypadReadUser+0x4e4>
		break;
 80016b2:	bf00      	nop
 80016b4:	e002      	b.n	80016bc <keypadReadUser+0x4e4>
		break;
 80016b6:	bf00      	nop
 80016b8:	e000      	b.n	80016bc <keypadReadUser+0x4e4>
		break;
 80016ba:	bf00      	nop
	for(uint8_t i = 0; i < 4; i++)
 80016bc:	7dbb      	ldrb	r3, [r7, #22]
 80016be:	3301      	adds	r3, #1
 80016c0:	75bb      	strb	r3, [r7, #22]
 80016c2:	7dbb      	ldrb	r3, [r7, #22]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	f67f ad92 	bls.w	80011ee <keypadReadUser+0x16>

		}//END SWITCH/CASE
	}//END FOR

return pressed_key;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
}//END keypadRead()
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}

080016d4 <pin>:
 * Se intentó implementar con un switch/case, pero me arrojó el siiguiente error:
 * switch quantity not an integer occurs.
 */

uint16_t pin(uint8_t pin)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	switch (pin)
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d84b      	bhi.n	800177c <pin+0xa8>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <pin+0x18>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	0800172d 	.word	0x0800172d
 80016f0:	08001731 	.word	0x08001731
 80016f4:	08001735 	.word	0x08001735
 80016f8:	08001739 	.word	0x08001739
 80016fc:	0800173d 	.word	0x0800173d
 8001700:	08001741 	.word	0x08001741
 8001704:	08001745 	.word	0x08001745
 8001708:	08001749 	.word	0x08001749
 800170c:	0800174d 	.word	0x0800174d
 8001710:	08001753 	.word	0x08001753
 8001714:	08001759 	.word	0x08001759
 8001718:	0800175f 	.word	0x0800175f
 800171c:	08001765 	.word	0x08001765
 8001720:	0800176b 	.word	0x0800176b
 8001724:	08001771 	.word	0x08001771
 8001728:	08001777 	.word	0x08001777
	{

	case 0:
		return GPIO_PIN_0;
 800172c:	2301      	movs	r3, #1
 800172e:	e026      	b.n	800177e <pin+0xaa>
	break;

	case 1:
		return GPIO_PIN_1;
 8001730:	2302      	movs	r3, #2
 8001732:	e024      	b.n	800177e <pin+0xaa>
	break;

	case 2:
		return GPIO_PIN_2;
 8001734:	2304      	movs	r3, #4
 8001736:	e022      	b.n	800177e <pin+0xaa>
	break;

	case 3:
		return GPIO_PIN_3;
 8001738:	2308      	movs	r3, #8
 800173a:	e020      	b.n	800177e <pin+0xaa>
	break;

	case 4:
		return GPIO_PIN_4;
 800173c:	2310      	movs	r3, #16
 800173e:	e01e      	b.n	800177e <pin+0xaa>
	break;

	case 5:
		return GPIO_PIN_5;
 8001740:	2320      	movs	r3, #32
 8001742:	e01c      	b.n	800177e <pin+0xaa>
	break;

	case 6:
		return GPIO_PIN_6;
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	e01a      	b.n	800177e <pin+0xaa>
	break;

	case 7:
		return GPIO_PIN_7;
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	e018      	b.n	800177e <pin+0xaa>
	break;

	case 8:
		return GPIO_PIN_8;
 800174c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001750:	e015      	b.n	800177e <pin+0xaa>
	break;

	case 9:
		return GPIO_PIN_9;
 8001752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001756:	e012      	b.n	800177e <pin+0xaa>
	break;

	case 10:
		return GPIO_PIN_10;
 8001758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175c:	e00f      	b.n	800177e <pin+0xaa>
	break;

	case 11:
		return GPIO_PIN_11;
 800175e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001762:	e00c      	b.n	800177e <pin+0xaa>
	break;

	case 12:
		return GPIO_PIN_12;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	e009      	b.n	800177e <pin+0xaa>
	break;

	case 13:
		return GPIO_PIN_13;
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	e006      	b.n	800177e <pin+0xaa>
	break;

	case 14:
		return GPIO_PIN_14;
 8001770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001774:	e003      	b.n	800177e <pin+0xaa>
	break;

	case 15:
		return GPIO_PIN_15;
 8001776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177a:	e000      	b.n	800177e <pin+0xaa>
	break;

	default:
		return 0;
 800177c:	2300      	movs	r3, #0
	}
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <port>:
 * @brief esta función busca los puertos GPIO correspondientes que el usuario ingrese.
 *
 */

GPIO_TypeDef * port(uint8_t port)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	switch (port)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	3b41      	subs	r3, #65	; 0x41
 800179a:	2b07      	cmp	r3, #7
 800179c:	d81e      	bhi.n	80017dc <port+0x50>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <port+0x18>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017c5 	.word	0x080017c5
 80017a8:	080017c9 	.word	0x080017c9
 80017ac:	080017cd 	.word	0x080017cd
 80017b0:	080017d1 	.word	0x080017d1
 80017b4:	080017d5 	.word	0x080017d5
 80017b8:	080017dd 	.word	0x080017dd
 80017bc:	080017dd 	.word	0x080017dd
 80017c0:	080017d9 	.word	0x080017d9
	{
	case 'A':
		return GPIOA;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <port+0x60>)
 80017c6:	e00a      	b.n	80017de <port+0x52>
	break;

	case 'B':
		return GPIOB;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <port+0x64>)
 80017ca:	e008      	b.n	80017de <port+0x52>
	break;

	case 'C':
		return GPIOC;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <port+0x68>)
 80017ce:	e006      	b.n	80017de <port+0x52>
	break;

	case 'D':
		return GPIOD;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <port+0x6c>)
 80017d2:	e004      	b.n	80017de <port+0x52>
	break;

	case 'E':
		return GPIOE;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <port+0x70>)
 80017d6:	e002      	b.n	80017de <port+0x52>
	break;

	case 'H':
		return GPIOH;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <port+0x74>)
 80017da:	e000      	b.n	80017de <port+0x52>
	break;

	default:
		return 0;
 80017dc:	2300      	movs	r3, #0
	}

}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40021c00 	.word	0x40021c00

08001804 <assert_ports>:



static bool_t assert_ports(keypad_t keypad)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	463c      	mov	r4, r7
 800180c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if( 'A' == keypad.col_1_port || 'A' ==  keypad.col_2_port ||
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b41      	cmp	r3, #65	; 0x41
 8001814:	d014      	beq.n	8001840 <assert_ports+0x3c>
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b41      	cmp	r3, #65	; 0x41
 800181a:	d011      	beq.n	8001840 <assert_ports+0x3c>
			'A' == keypad.col_3_port || 'A' == keypad.col_4_port ||
 800181c:	797b      	ldrb	r3, [r7, #5]
	if( 'A' == keypad.col_1_port || 'A' ==  keypad.col_2_port ||
 800181e:	2b41      	cmp	r3, #65	; 0x41
 8001820:	d00e      	beq.n	8001840 <assert_ports+0x3c>
			'A' == keypad.col_3_port || 'A' == keypad.col_4_port ||
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b41      	cmp	r3, #65	; 0x41
 8001826:	d00b      	beq.n	8001840 <assert_ports+0x3c>
			'A' == keypad.row_A_port || 'A' ==  keypad.row_B_port ||
 8001828:	7a7b      	ldrb	r3, [r7, #9]
			'A' == keypad.col_3_port || 'A' == keypad.col_4_port ||
 800182a:	2b41      	cmp	r3, #65	; 0x41
 800182c:	d008      	beq.n	8001840 <assert_ports+0x3c>
			'A' == keypad.row_A_port || 'A' ==  keypad.row_B_port ||
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	2b41      	cmp	r3, #65	; 0x41
 8001832:	d005      	beq.n	8001840 <assert_ports+0x3c>
			'A' == keypad.row_C_port || 'A' == keypad.row_D_port)
 8001834:	7b7b      	ldrb	r3, [r7, #13]
			'A' == keypad.row_A_port || 'A' ==  keypad.row_B_port ||
 8001836:	2b41      	cmp	r3, #65	; 0x41
 8001838:	d002      	beq.n	8001840 <assert_ports+0x3c>
			'A' == keypad.row_C_port || 'A' == keypad.row_D_port)
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	2b41      	cmp	r3, #65	; 0x41
 800183e:	d10e      	bne.n	800185e <assert_ports+0x5a>
		{
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <assert_ports+0x1f0>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <assert_ports+0x1f0>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <assert_ports+0x1f0>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	e0c4      	b.n	80019e8 <assert_ports+0x1e4>
		} else

		if( 'B' == keypad.col_1_port || 'B' ==  keypad.col_2_port ||
 800185e:	787b      	ldrb	r3, [r7, #1]
 8001860:	2b42      	cmp	r3, #66	; 0x42
 8001862:	d014      	beq.n	800188e <assert_ports+0x8a>
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b42      	cmp	r3, #66	; 0x42
 8001868:	d011      	beq.n	800188e <assert_ports+0x8a>
			'B' == keypad.col_3_port || 'B' == keypad.col_4_port ||
 800186a:	797b      	ldrb	r3, [r7, #5]
		if( 'B' == keypad.col_1_port || 'B' ==  keypad.col_2_port ||
 800186c:	2b42      	cmp	r3, #66	; 0x42
 800186e:	d00e      	beq.n	800188e <assert_ports+0x8a>
			'B' == keypad.col_3_port || 'B' == keypad.col_4_port ||
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b42      	cmp	r3, #66	; 0x42
 8001874:	d00b      	beq.n	800188e <assert_ports+0x8a>
			'B' == keypad.row_A_port || 'B' ==  keypad.row_B_port ||
 8001876:	7a7b      	ldrb	r3, [r7, #9]
			'B' == keypad.col_3_port || 'B' == keypad.col_4_port ||
 8001878:	2b42      	cmp	r3, #66	; 0x42
 800187a:	d008      	beq.n	800188e <assert_ports+0x8a>
			'B' == keypad.row_A_port || 'B' ==  keypad.row_B_port ||
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	2b42      	cmp	r3, #66	; 0x42
 8001880:	d005      	beq.n	800188e <assert_ports+0x8a>
			'B' == keypad.row_C_port || 'B' == keypad.row_D_port)
 8001882:	7b7b      	ldrb	r3, [r7, #13]
			'B' == keypad.row_A_port || 'B' ==  keypad.row_B_port ||
 8001884:	2b42      	cmp	r3, #66	; 0x42
 8001886:	d002      	beq.n	800188e <assert_ports+0x8a>
			'B' == keypad.row_C_port || 'B' == keypad.row_D_port)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b42      	cmp	r3, #66	; 0x42
 800188c:	d10e      	bne.n	80018ac <assert_ports+0xa8>
			{
				__HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <assert_ports+0x1f0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <assert_ports+0x1f0>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <assert_ports+0x1f0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	e09d      	b.n	80019e8 <assert_ports+0x1e4>
			} else

		if( 'C' == keypad.col_1_port || 'C' ==  keypad.col_2_port ||
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b43      	cmp	r3, #67	; 0x43
 80018b0:	d014      	beq.n	80018dc <assert_ports+0xd8>
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2b43      	cmp	r3, #67	; 0x43
 80018b6:	d011      	beq.n	80018dc <assert_ports+0xd8>
			'C' == keypad.col_3_port || 'C' == keypad.col_4_port ||
 80018b8:	797b      	ldrb	r3, [r7, #5]
		if( 'C' == keypad.col_1_port || 'C' ==  keypad.col_2_port ||
 80018ba:	2b43      	cmp	r3, #67	; 0x43
 80018bc:	d00e      	beq.n	80018dc <assert_ports+0xd8>
			'C' == keypad.col_3_port || 'C' == keypad.col_4_port ||
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b43      	cmp	r3, #67	; 0x43
 80018c2:	d00b      	beq.n	80018dc <assert_ports+0xd8>
			'C' == keypad.row_A_port || 'C' ==  keypad.row_B_port ||
 80018c4:	7a7b      	ldrb	r3, [r7, #9]
			'C' == keypad.col_3_port || 'C' == keypad.col_4_port ||
 80018c6:	2b43      	cmp	r3, #67	; 0x43
 80018c8:	d008      	beq.n	80018dc <assert_ports+0xd8>
			'C' == keypad.row_A_port || 'C' ==  keypad.row_B_port ||
 80018ca:	7afb      	ldrb	r3, [r7, #11]
 80018cc:	2b43      	cmp	r3, #67	; 0x43
 80018ce:	d005      	beq.n	80018dc <assert_ports+0xd8>
			'C' == keypad.row_C_port || 'C' == keypad.row_D_port)
 80018d0:	7b7b      	ldrb	r3, [r7, #13]
			'C' == keypad.row_A_port || 'C' ==  keypad.row_B_port ||
 80018d2:	2b43      	cmp	r3, #67	; 0x43
 80018d4:	d002      	beq.n	80018dc <assert_ports+0xd8>
			'C' == keypad.row_C_port || 'C' == keypad.row_D_port)
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b43      	cmp	r3, #67	; 0x43
 80018da:	d10e      	bne.n	80018fa <assert_ports+0xf6>
			{
				__HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <assert_ports+0x1f0>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a43      	ldr	r2, [pc, #268]	; (80019f4 <assert_ports+0x1f0>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <assert_ports+0x1f0>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	e076      	b.n	80019e8 <assert_ports+0x1e4>
			}else


		if( 'D' == keypad.col_1_port || 'D' ==  keypad.col_2_port ||
 80018fa:	787b      	ldrb	r3, [r7, #1]
 80018fc:	2b44      	cmp	r3, #68	; 0x44
 80018fe:	d014      	beq.n	800192a <assert_ports+0x126>
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	2b44      	cmp	r3, #68	; 0x44
 8001904:	d011      	beq.n	800192a <assert_ports+0x126>
			'D' == keypad.col_3_port || 'D' == keypad.col_4_port ||
 8001906:	797b      	ldrb	r3, [r7, #5]
		if( 'D' == keypad.col_1_port || 'D' ==  keypad.col_2_port ||
 8001908:	2b44      	cmp	r3, #68	; 0x44
 800190a:	d00e      	beq.n	800192a <assert_ports+0x126>
			'D' == keypad.col_3_port || 'D' == keypad.col_4_port ||
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b44      	cmp	r3, #68	; 0x44
 8001910:	d00b      	beq.n	800192a <assert_ports+0x126>
			'D' == keypad.row_A_port || 'D' ==  keypad.row_B_port ||
 8001912:	7a7b      	ldrb	r3, [r7, #9]
			'D' == keypad.col_3_port || 'D' == keypad.col_4_port ||
 8001914:	2b44      	cmp	r3, #68	; 0x44
 8001916:	d008      	beq.n	800192a <assert_ports+0x126>
			'D' == keypad.row_A_port || 'D' ==  keypad.row_B_port ||
 8001918:	7afb      	ldrb	r3, [r7, #11]
 800191a:	2b44      	cmp	r3, #68	; 0x44
 800191c:	d005      	beq.n	800192a <assert_ports+0x126>
			'D' == keypad.row_C_port || 'D' == keypad.row_D_port)
 800191e:	7b7b      	ldrb	r3, [r7, #13]
			'D' == keypad.row_A_port || 'D' ==  keypad.row_B_port ||
 8001920:	2b44      	cmp	r3, #68	; 0x44
 8001922:	d002      	beq.n	800192a <assert_ports+0x126>
			'D' == keypad.row_C_port || 'D' == keypad.row_D_port)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b44      	cmp	r3, #68	; 0x44
 8001928:	d10e      	bne.n	8001948 <assert_ports+0x144>
			{
				__HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <assert_ports+0x1f0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a30      	ldr	r2, [pc, #192]	; (80019f4 <assert_ports+0x1f0>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <assert_ports+0x1f0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	e04f      	b.n	80019e8 <assert_ports+0x1e4>
			} else

		if( 'E' == keypad.col_1_port || 'E' ==  keypad.col_2_port ||
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b45      	cmp	r3, #69	; 0x45
 800194c:	d014      	beq.n	8001978 <assert_ports+0x174>
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b45      	cmp	r3, #69	; 0x45
 8001952:	d011      	beq.n	8001978 <assert_ports+0x174>
			'E' == keypad.col_3_port || 'E' == keypad.col_4_port ||
 8001954:	797b      	ldrb	r3, [r7, #5]
		if( 'E' == keypad.col_1_port || 'E' ==  keypad.col_2_port ||
 8001956:	2b45      	cmp	r3, #69	; 0x45
 8001958:	d00e      	beq.n	8001978 <assert_ports+0x174>
			'E' == keypad.col_3_port || 'E' == keypad.col_4_port ||
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b45      	cmp	r3, #69	; 0x45
 800195e:	d00b      	beq.n	8001978 <assert_ports+0x174>
			'E' == keypad.row_A_port || 'E' ==  keypad.row_B_port ||
 8001960:	7a7b      	ldrb	r3, [r7, #9]
			'E' == keypad.col_3_port || 'E' == keypad.col_4_port ||
 8001962:	2b45      	cmp	r3, #69	; 0x45
 8001964:	d008      	beq.n	8001978 <assert_ports+0x174>
			'E' == keypad.row_A_port || 'E' ==  keypad.row_B_port ||
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	2b45      	cmp	r3, #69	; 0x45
 800196a:	d005      	beq.n	8001978 <assert_ports+0x174>
			'E' == keypad.row_C_port || 'E' == keypad.row_D_port)
 800196c:	7b7b      	ldrb	r3, [r7, #13]
			'E' == keypad.row_A_port || 'E' ==  keypad.row_B_port ||
 800196e:	2b45      	cmp	r3, #69	; 0x45
 8001970:	d002      	beq.n	8001978 <assert_ports+0x174>
			'E' == keypad.row_C_port || 'E' == keypad.row_D_port)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b45      	cmp	r3, #69	; 0x45
 8001976:	d10e      	bne.n	8001996 <assert_ports+0x192>
			{
				__HAL_RCC_GPIOE_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <assert_ports+0x1f0>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <assert_ports+0x1f0>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <assert_ports+0x1f0>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	e028      	b.n	80019e8 <assert_ports+0x1e4>
			} else

		if( 'H' == keypad.col_1_port || 'H' ==  keypad.col_2_port ||
 8001996:	787b      	ldrb	r3, [r7, #1]
 8001998:	2b48      	cmp	r3, #72	; 0x48
 800199a:	d014      	beq.n	80019c6 <assert_ports+0x1c2>
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b48      	cmp	r3, #72	; 0x48
 80019a0:	d011      	beq.n	80019c6 <assert_ports+0x1c2>
			'H' == keypad.col_3_port || 'H' == keypad.col_4_port ||
 80019a2:	797b      	ldrb	r3, [r7, #5]
		if( 'H' == keypad.col_1_port || 'H' ==  keypad.col_2_port ||
 80019a4:	2b48      	cmp	r3, #72	; 0x48
 80019a6:	d00e      	beq.n	80019c6 <assert_ports+0x1c2>
			'H' == keypad.col_3_port || 'H' == keypad.col_4_port ||
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b48      	cmp	r3, #72	; 0x48
 80019ac:	d00b      	beq.n	80019c6 <assert_ports+0x1c2>
			'H' == keypad.row_A_port || 'H' ==  keypad.row_B_port ||
 80019ae:	7a7b      	ldrb	r3, [r7, #9]
			'H' == keypad.col_3_port || 'H' == keypad.col_4_port ||
 80019b0:	2b48      	cmp	r3, #72	; 0x48
 80019b2:	d008      	beq.n	80019c6 <assert_ports+0x1c2>
			'H' == keypad.row_A_port || 'H' ==  keypad.row_B_port ||
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	2b48      	cmp	r3, #72	; 0x48
 80019b8:	d005      	beq.n	80019c6 <assert_ports+0x1c2>
			'H' == keypad.row_C_port || 'H' == keypad.row_D_port)
 80019ba:	7b7b      	ldrb	r3, [r7, #13]
			'H' == keypad.row_A_port || 'H' ==  keypad.row_B_port ||
 80019bc:	2b48      	cmp	r3, #72	; 0x48
 80019be:	d002      	beq.n	80019c6 <assert_ports+0x1c2>
			'H' == keypad.row_C_port || 'H' == keypad.row_D_port)
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b48      	cmp	r3, #72	; 0x48
 80019c4:	d10e      	bne.n	80019e4 <assert_ports+0x1e0>
			{
				__HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <assert_ports+0x1f0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <assert_ports+0x1f0>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <assert_ports+0x1f0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	e001      	b.n	80019e8 <assert_ports+0x1e4>

			} else

			{
				return false;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <assert_ports+0x1e6>
			}
	return true;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc90      	pop	{r4, r7}
 80019f2:	4770      	bx	lr
 80019f4:	40023800 	.word	0x40023800

080019f8 <uartInit>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

bool_t uartInit()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
	/**
	* @brief Habilita el control del clok DMA por si el buffer de la UART se llena
	* éste le permita escribir directamente en la memoria sin pasar por el procesador del micro.
	*
	*/
	__HAL_RCC_DMA2_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <uartInit+0xdc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <uartInit+0xdc>)
 8001a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <uartInit+0xdc>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2039      	movs	r0, #57	; 0x39
 8001a20:	f000 f9f5 	bl	8001e0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a24:	2039      	movs	r0, #57	; 0x39
 8001a26:	f000 fa0e 	bl	8001e46 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2045      	movs	r0, #69	; 0x45
 8001a30:	f000 f9ed 	bl	8001e0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a34:	2045      	movs	r0, #69	; 0x45
 8001a36:	f000 fa06 	bl	8001e46 <HAL_NVIC_EnableIRQ>
	* @brief estas líneas configuran la UART a utilizar. En este caso
	* se inicializa la USART6:
	* PIN PC6 como TX y
	* PIN PC7 como RX.
	*/
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <uartInit+0xdc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <uartInit+0xdc>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <uartInit+0xdc>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
	huart6.Instance = USART6;
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <uartInit+0xe0>)
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <uartInit+0xe4>)
 8001a5a:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <uartInit+0xe0>)
 8001a5e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a62:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <uartInit+0xe0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <uartInit+0xe0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <uartInit+0xe0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <uartInit+0xe0>)
 8001a78:	220c      	movs	r2, #12
 8001a7a:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <uartInit+0xe0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <uartInit+0xe0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <uartInit+0xe0>)
 8001a8a:	f001 fb8b 	bl	80031a4 <HAL_UART_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <uartInit+0xa0>
	{
		return false;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e018      	b.n	8001aca <uartInit+0xd2>
	}
	else
	{
		uartSendString_direct("Instance: USART6\n\r");
 8001a98:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <uartInit+0xe8>)
 8001a9a:	f000 f831 	bl	8001b00 <uartSendString_direct>
		uartSendString_direct("Baud rate: 9600\n\r");
 8001a9e:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <uartInit+0xec>)
 8001aa0:	f000 f82e 	bl	8001b00 <uartSendString_direct>
		uartSendString_direct("Word length: 8 bits\n\r");
 8001aa4:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <uartInit+0xf0>)
 8001aa6:	f000 f82b 	bl	8001b00 <uartSendString_direct>
		uartSendString_direct("Stop bits: 1 bit\n\r");
 8001aaa:	4810      	ldr	r0, [pc, #64]	; (8001aec <uartInit+0xf4>)
 8001aac:	f000 f828 	bl	8001b00 <uartSendString_direct>
		uartSendString_direct("Parity: NONE\n\r");
 8001ab0:	480f      	ldr	r0, [pc, #60]	; (8001af0 <uartInit+0xf8>)
 8001ab2:	f000 f825 	bl	8001b00 <uartSendString_direct>
		uartSendString_direct("Mode: Send/Recieve\n\r");
 8001ab6:	480f      	ldr	r0, [pc, #60]	; (8001af4 <uartInit+0xfc>)
 8001ab8:	f000 f822 	bl	8001b00 <uartSendString_direct>
		uartSendString_direct("Flow Control: NONE\n\r");
 8001abc:	480e      	ldr	r0, [pc, #56]	; (8001af8 <uartInit+0x100>)
 8001abe:	f000 f81f 	bl	8001b00 <uartSendString_direct>
		uartSendString_direct("Over sampling: 16 bits\n\r");
 8001ac2:	480e      	ldr	r0, [pc, #56]	; (8001afc <uartInit+0x104>)
 8001ac4:	f000 f81c 	bl	8001b00 <uartSendString_direct>
		return true;
 8001ac8:	2301      	movs	r3, #1
	}

}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	2000014c 	.word	0x2000014c
 8001adc:	40011400 	.word	0x40011400
 8001ae0:	0800414c 	.word	0x0800414c
 8001ae4:	08004160 	.word	0x08004160
 8001ae8:	08004174 	.word	0x08004174
 8001aec:	0800418c 	.word	0x0800418c
 8001af0:	080041a0 	.word	0x080041a0
 8001af4:	080041b0 	.word	0x080041b0
 8001af8:	080041c8 	.word	0x080041c8
 8001afc:	080041e0 	.word	0x080041e0

08001b00 <uartSendString_direct>:
	//uint8_t string[] = mensaje;
	HAL_UART_Transmit(&huart6, mensaje, longitud - 1, 0xFFF);
}

void uartSendString_direct(char *mensaje)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	uint16_t longitud = strlen(mensaje);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fb63 	bl	80001d4 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart6, mensaje, longitud , 0xFFF);
 8001b12:	89fa      	ldrh	r2, [r7, #14]
 8001b14:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <uartSendString_direct+0x28>)
 8001b1c:	f001 fb8f 	bl	800323e <HAL_UART_Transmit>
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000014c 	.word	0x2000014c

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_Init+0x40>)
 8001b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_Init+0x40>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x40>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f94f 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	200f      	movs	r0, #15
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7fe fdf8 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f967 	bl	8001e62 <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 f92f 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000003c 	.word	0x2000003c
 8001bc8:	20000044 	.word	0x20000044
 8001bcc:	20000040 	.word	0x20000040

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000044 	.word	0x20000044
 8001bf4:	20000190 	.word	0x20000190

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000190 	.word	0x20000190

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000044 	.word	0x20000044

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff29 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff3e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff feb6 	bl	8001bf8 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e099      	b.n	8001fcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb8:	e00f      	b.n	8001eda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eba:	f7ff fe9d 	bl	8001bf8 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d908      	bls.n	8001eda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e078      	b.n	8001fcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e8      	bne.n	8001eba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_DMA_Init+0x158>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d107      	bne.n	8001f44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f023 0307 	bic.w	r3, r3, #7
 8001f5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d117      	bne.n	8001f9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00e      	beq.n	8001f9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fa7b 	bl	800247c <DMA_CheckFifoParam>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e016      	b.n	8001fcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fa32 	bl	8002410 <DMA_CalcBaseAndBitshift>
 8001fac:	4603      	mov	r3, r0
 8001fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	223f      	movs	r2, #63	; 0x3f
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	f010803f 	.word	0xf010803f

08001fd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fe6:	f7ff fe07 	bl	8001bf8 <HAL_GetTick>
 8001fea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d008      	beq.n	800200a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e052      	b.n	80020b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0216 	bic.w	r2, r2, #22
 8002018:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002028:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <HAL_DMA_Abort+0x62>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0208 	bic.w	r2, r2, #8
 8002048:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	e013      	b.n	8002084 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800205c:	f7ff fdcc 	bl	8001bf8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b05      	cmp	r3, #5
 8002068:	d90c      	bls.n	8002084 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2203      	movs	r2, #3
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e015      	b.n	80020b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e4      	bne.n	800205c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	223f      	movs	r2, #63	; 0x3f
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d004      	beq.n	80020d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00c      	b.n	80020f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2205      	movs	r2, #5
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002108:	4b92      	ldr	r3, [pc, #584]	; (8002354 <HAL_DMA_IRQHandler+0x258>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_DMA_IRQHandler+0x25c>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0a9b      	lsrs	r3, r3, #10
 8002114:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2208      	movs	r2, #8
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0204 	bic.w	r2, r2, #4
 800214e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2208      	movs	r2, #8
 8002156:	409a      	lsls	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2201      	movs	r2, #1
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2201      	movs	r2, #1
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2204      	movs	r2, #4
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2204      	movs	r2, #4
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2210      	movs	r2, #16
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d043      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03c      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2210      	movs	r2, #16
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d018      	beq.n	800223e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d108      	bne.n	800222c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d024      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
 800222a:	e01f      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e016      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0208 	bic.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2220      	movs	r2, #32
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 808e 	beq.w	800239a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8086 	beq.w	800239a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	2220      	movs	r2, #32
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d136      	bne.n	8002314 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0216 	bic.w	r2, r2, #22
 80022b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_DMA_IRQHandler+0x1da>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0208 	bic.w	r2, r2, #8
 80022e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	223f      	movs	r2, #63	; 0x3f
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07d      	beq.n	8002406 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
        }
        return;
 8002312:	e078      	b.n	8002406 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01c      	beq.n	800235c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	2b00      	cmp	r3, #0
 8002336:	d030      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e02b      	b.n	800239a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d027      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
 8002352:	e022      	b.n	800239a <HAL_DMA_IRQHandler+0x29e>
 8002354:	2000003c 	.word	0x2000003c
 8002358:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0210 	bic.w	r2, r2, #16
 8002378:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d032      	beq.n	8002408 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d307      	bcc.n	80023e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f2      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x2ca>
 80023e0:	e000      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e000      	b.n	8002408 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002406:	bf00      	nop
    }
  }
}
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop

08002410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3b10      	subs	r3, #16
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <DMA_CalcBaseAndBitshift+0x64>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <DMA_CalcBaseAndBitshift+0x68>)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d909      	bls.n	8002452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58
 8002450:	e007      	b.n	8002462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	aaaaaaab 	.word	0xaaaaaaab
 8002478:	08004214 	.word	0x08004214

0800247c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11f      	bne.n	80024d6 <DMA_CheckFifoParam+0x5a>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d856      	bhi.n	800254a <DMA_CheckFifoParam+0xce>
 800249c:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <DMA_CheckFifoParam+0x28>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024c7 	.word	0x080024c7
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	0800254b 	.word	0x0800254b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d046      	beq.n	800254e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c4:	e043      	b.n	800254e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ce:	d140      	bne.n	8002552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e03d      	b.n	8002552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024de:	d121      	bne.n	8002524 <DMA_CheckFifoParam+0xa8>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d837      	bhi.n	8002556 <DMA_CheckFifoParam+0xda>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <DMA_CheckFifoParam+0x70>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	080024fd 	.word	0x080024fd
 80024f0:	08002503 	.word	0x08002503
 80024f4:	080024fd 	.word	0x080024fd
 80024f8:	08002515 	.word	0x08002515
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e030      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d025      	beq.n	800255a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e022      	b.n	800255a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800251c:	d11f      	bne.n	800255e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002522:	e01c      	b.n	800255e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d903      	bls.n	8002532 <DMA_CheckFifoParam+0xb6>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d003      	beq.n	8002538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002530:	e018      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
      break;
 8002536:	e015      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00e      	beq.n	8002562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e00b      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;
 800254a:	bf00      	nop
 800254c:	e00a      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e008      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 8002552:	bf00      	nop
 8002554:	e006      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 8002556:	bf00      	nop
 8002558:	e004      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 800255a:	bf00      	nop
 800255c:	e002      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;   
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
    }
  } 
  
  return status; 
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e159      	b.n	8002844 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 8148 	bne.w	800283e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d005      	beq.n	80025c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d130      	bne.n	8002628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 0201 	and.w	r2, r3, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b03      	cmp	r3, #3
 8002632:	d017      	beq.n	8002664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a2 	beq.w	800283e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b57      	ldr	r3, [pc, #348]	; (800285c <HAL_GPIO_Init+0x2e8>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a56      	ldr	r2, [pc, #344]	; (800285c <HAL_GPIO_Init+0x2e8>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b54      	ldr	r3, [pc, #336]	; (800285c <HAL_GPIO_Init+0x2e8>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002716:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_GPIO_Init+0x2ec>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a49      	ldr	r2, [pc, #292]	; (8002864 <HAL_GPIO_Init+0x2f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x202>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a48      	ldr	r2, [pc, #288]	; (8002868 <HAL_GPIO_Init+0x2f4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x1fe>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_GPIO_Init+0x2f8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x1fa>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_GPIO_Init+0x2fc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x1f6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a45      	ldr	r2, [pc, #276]	; (8002874 <HAL_GPIO_Init+0x300>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x1f2>
 8002762:	2304      	movs	r3, #4
 8002764:	e008      	b.n	8002778 <HAL_GPIO_Init+0x204>
 8002766:	2307      	movs	r3, #7
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x204>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x204>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x204>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x204>
 8002776:	2300      	movs	r3, #0
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002788:	4935      	ldr	r1, [pc, #212]	; (8002860 <HAL_GPIO_Init+0x2ec>)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_GPIO_Init+0x304>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ba:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x304>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c0:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_GPIO_Init+0x304>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e4:	4a24      	ldr	r2, [pc, #144]	; (8002878 <HAL_GPIO_Init+0x304>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_GPIO_Init+0x304>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_GPIO_Init+0x304>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_GPIO_Init+0x304>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002838:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_GPIO_Init+0x304>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3301      	adds	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	f67f aea2 	bls.w	8002590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40013c00 	.word	0x40013c00

0800287c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	e001      	b.n	800289e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f0:	887a      	ldrh	r2, [r7, #2]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	041a      	lsls	r2, r3, #16
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	400b      	ands	r3, r1
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e264      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d075      	beq.n	8002a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002932:	4ba3      	ldr	r3, [pc, #652]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b04      	cmp	r3, #4
 800293c:	d00c      	beq.n	8002958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4ba0      	ldr	r3, [pc, #640]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002946:	2b08      	cmp	r3, #8
 8002948:	d112      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294a:	4b9d      	ldr	r3, [pc, #628]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002956:	d10b      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05b      	beq.n	8002a1c <HAL_RCC_OscConfig+0x108>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d157      	bne.n	8002a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e23f      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d106      	bne.n	8002988 <HAL_RCC_OscConfig+0x74>
 800297a:	4b91      	ldr	r3, [pc, #580]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a90      	ldr	r2, [pc, #576]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xb0>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x98>
 8002992:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a8a      	ldr	r2, [pc, #552]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a87      	ldr	r2, [pc, #540]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xb0>
 80029ac:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a83      	ldr	r2, [pc, #524]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a80      	ldr	r2, [pc, #512]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff f914 	bl	8001bf8 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d4:	f7ff f910 	bl	8001bf8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e204      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xc0>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff f900 	bl	8001bf8 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029fc:	f7ff f8fc 	bl	8001bf8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1f0      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0xe8>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d063      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a2a:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b5f      	ldr	r3, [pc, #380]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b5c      	ldr	r3, [pc, #368]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x152>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1c4      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4952      	ldr	r1, [pc, #328]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <HAL_RCC_OscConfig+0x2b0>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7ff f8b5 	bl	8001bf8 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7ff f8b1 	bl	8001bf8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1a5      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4940      	ldr	r1, [pc, #256]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x2b0>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7ff f894 	bl	8001bf8 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7ff f890 	bl	8001bf8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e184      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d030      	beq.n	8002b60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_OscConfig+0x2b4>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7ff f874 	bl	8001bf8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b14:	f7ff f870 	bl	8001bf8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e164      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x200>
 8002b32:	e015      	b.n	8002b60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x2b4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff f85d 	bl	8001bf8 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b42:	f7ff f859 	bl	8001bf8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e14d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a0 	beq.w	8002cae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x2b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d121      	bne.n	8002bee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_RCC_OscConfig+0x2b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <HAL_RCC_OscConfig+0x2b8>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f81f 	bl	8001bf8 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e011      	b.n	8002be2 <HAL_RCC_OscConfig+0x2ce>
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	42470000 	.word	0x42470000
 8002bc8:	42470e80 	.word	0x42470e80
 8002bcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7ff f812 	bl	8001bf8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e106      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <HAL_RCC_OscConfig+0x4e4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2f0>
 8002bf6:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	e01c      	b.n	8002c3e <HAL_RCC_OscConfig+0x32a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCC_OscConfig+0x312>
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a7a      	ldr	r2, [pc, #488]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	4b78      	ldr	r3, [pc, #480]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	e00b      	b.n	8002c3e <HAL_RCC_OscConfig+0x32a>
 8002c26:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a74      	ldr	r2, [pc, #464]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	4b72      	ldr	r3, [pc, #456]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a71      	ldr	r2, [pc, #452]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d015      	beq.n	8002c72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe ffd7 	bl	8001bf8 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe ffd3 	bl	8001bf8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0c5      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ee      	beq.n	8002c4e <HAL_RCC_OscConfig+0x33a>
 8002c70:	e014      	b.n	8002c9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c72:	f7fe ffc1 	bl	8001bf8 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe ffbd 	bl	8001bf8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0af      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c90:	4b5a      	ldr	r3, [pc, #360]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ee      	bne.n	8002c7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d105      	bne.n	8002cae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a55      	ldr	r2, [pc, #340]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 809b 	beq.w	8002dee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d05c      	beq.n	8002d7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d141      	bne.n	8002d50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_RCC_OscConfig+0x4ec>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fe ff91 	bl	8001bf8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cda:	f7fe ff8d 	bl	8001bf8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e081      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cec:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	019b      	lsls	r3, r3, #6
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	3b01      	subs	r3, #1
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	061b      	lsls	r3, r3, #24
 8002d1c:	4937      	ldr	r1, [pc, #220]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCC_OscConfig+0x4ec>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe ff66 	bl	8001bf8 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe ff62 	bl	8001bf8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e056      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x41c>
 8002d4e:	e04e      	b.n	8002dee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x4ec>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fe ff4f 	bl	8001bf8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe ff4b 	bl	8001bf8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e03f      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x44a>
 8002d7c:	e037      	b.n	8002dee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e032      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_RCC_OscConfig+0x4e8>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d028      	beq.n	8002dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d121      	bne.n	8002dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d11a      	bne.n	8002dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dba:	4013      	ands	r3, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d111      	bne.n	8002dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470060 	.word	0x42470060

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fe fe80 	bl	8001bf8 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe fe7c 	bl	8001bf8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fde0 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	080041fc 	.word	0x080041fc
 8002fc8:	2000003c 	.word	0x2000003c
 8002fcc:	20000040 	.word	0x20000040

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b5b0      	push	{r4, r5, r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	6079      	str	r1, [r7, #4]
 8002fda:	2100      	movs	r1, #0
 8002fdc:	60f9      	str	r1, [r7, #12]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe6:	4952      	ldr	r1, [pc, #328]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe8:	6889      	ldr	r1, [r1, #8]
 8002fea:	f001 010c 	and.w	r1, r1, #12
 8002fee:	2908      	cmp	r1, #8
 8002ff0:	d00d      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0x3e>
 8002ff2:	2908      	cmp	r1, #8
 8002ff4:	f200 8094 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x150>
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x32>
 8002ffc:	2904      	cmp	r1, #4
 8002ffe:	d003      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x38>
 8003000:	e08e      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003002:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <HAL_RCC_GetSysClockFreq+0x164>)
 8003004:	60bb      	str	r3, [r7, #8]
       break;
 8003006:	e08e      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_RCC_GetSysClockFreq+0x168>)
 800300a:	60bb      	str	r3, [r7, #8]
      break;
 800300c:	e08b      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800300e:	4948      	ldr	r1, [pc, #288]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003010:	6849      	ldr	r1, [r1, #4]
 8003012:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003016:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003018:	4945      	ldr	r1, [pc, #276]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 800301a:	6849      	ldr	r1, [r1, #4]
 800301c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003020:	2900      	cmp	r1, #0
 8003022:	d024      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003024:	4942      	ldr	r1, [pc, #264]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003026:	6849      	ldr	r1, [r1, #4]
 8003028:	0989      	lsrs	r1, r1, #6
 800302a:	4608      	mov	r0, r1
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003034:	f04f 0500 	mov.w	r5, #0
 8003038:	ea00 0204 	and.w	r2, r0, r4
 800303c:	ea01 0305 	and.w	r3, r1, r5
 8003040:	493d      	ldr	r1, [pc, #244]	; (8003138 <HAL_RCC_GetSysClockFreq+0x168>)
 8003042:	fb01 f003 	mul.w	r0, r1, r3
 8003046:	2100      	movs	r1, #0
 8003048:	fb01 f102 	mul.w	r1, r1, r2
 800304c:	1844      	adds	r4, r0, r1
 800304e:	493a      	ldr	r1, [pc, #232]	; (8003138 <HAL_RCC_GetSysClockFreq+0x168>)
 8003050:	fba2 0101 	umull	r0, r1, r2, r1
 8003054:	1863      	adds	r3, r4, r1
 8003056:	4619      	mov	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	f7fd f8c0 	bl	80001e4 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e04a      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	461a      	mov	r2, r3
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800307e:	f04f 0100 	mov.w	r1, #0
 8003082:	ea02 0400 	and.w	r4, r2, r0
 8003086:	ea03 0501 	and.w	r5, r3, r1
 800308a:	4620      	mov	r0, r4
 800308c:	4629      	mov	r1, r5
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	014b      	lsls	r3, r1, #5
 8003098:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800309c:	0142      	lsls	r2, r0, #5
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	1b00      	subs	r0, r0, r4
 80030a4:	eb61 0105 	sbc.w	r1, r1, r5
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	018b      	lsls	r3, r1, #6
 80030b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030b6:	0182      	lsls	r2, r0, #6
 80030b8:	1a12      	subs	r2, r2, r0
 80030ba:	eb63 0301 	sbc.w	r3, r3, r1
 80030be:	f04f 0000 	mov.w	r0, #0
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	00d9      	lsls	r1, r3, #3
 80030c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030cc:	00d0      	lsls	r0, r2, #3
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	1912      	adds	r2, r2, r4
 80030d4:	eb45 0303 	adc.w	r3, r5, r3
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	0299      	lsls	r1, r3, #10
 80030e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030e6:	0290      	lsls	r0, r2, #10
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f7fd f874 	bl	80001e4 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	60bb      	str	r3, [r7, #8]
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <HAL_RCC_GetSysClockFreq+0x164>)
 8003122:	60bb      	str	r3, [r7, #8]
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	68bb      	ldr	r3, [r7, #8]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bdb0      	pop	{r4, r5, r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	017d7840 	.word	0x017d7840

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	2000003c 	.word	0x2000003c

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	0800420c 	.word	0x0800420c

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	0800420c 	.word	0x0800420c

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03f      	b.n	8003236 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd faea 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fd7b 	bl	8003ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08a      	sub	sp, #40	; 0x28
 8003242:	af02      	add	r7, sp, #8
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d17c      	bne.n	8003358 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_UART_Transmit+0x2c>
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e075      	b.n	800335a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_UART_Transmit+0x3e>
 8003278:	2302      	movs	r3, #2
 800327a:	e06e      	b.n	800335a <HAL_UART_Transmit+0x11c>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2221      	movs	r2, #33	; 0x21
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003292:	f7fe fcb1 	bl	8001bf8 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d108      	bne.n	80032c0 <HAL_UART_Transmit+0x82>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e003      	b.n	80032c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032d0:	e02a      	b.n	8003328 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 faf9 	bl	80038d4 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e036      	b.n	800335a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003300:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3302      	adds	r3, #2
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	e007      	b.n	800331a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1cf      	bne.n	80032d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fac9 	bl	80038d4 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e006      	b.n	800335a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b0ba      	sub	sp, #232	; 0xe8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_UART_IRQHandler+0x66>
 80033b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fbd3 	bl	8003b6e <UART_Receive_IT>
      return;
 80033c8:	e256      	b.n	8003878 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80de 	beq.w	8003590 <HAL_UART_IRQHandler+0x22c>
 80033d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80d1 	beq.w	8003590 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_UART_IRQHandler+0xae>
 80033fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_UART_IRQHandler+0xd2>
 800341e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_UART_IRQHandler+0xf6>
 8003442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f043 0204 	orr.w	r2, r3, #4
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d011      	beq.n	800348a <HAL_UART_IRQHandler+0x126>
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0208 	orr.w	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 81ed 	beq.w	800386e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_UART_IRQHandler+0x14e>
 80034a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb5e 	bl	8003b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_UART_IRQHandler+0x17a>
 80034d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d04f      	beq.n	800357e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa66 	bl	80039b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d141      	bne.n	8003576 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800350c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800351e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800352a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1d9      	bne.n	80034f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	2b00      	cmp	r3, #0
 8003544:	d013      	beq.n	800356e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	4a7d      	ldr	r2, [pc, #500]	; (8003740 <HAL_UART_IRQHandler+0x3dc>)
 800354c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe fdb0 	bl	80020b8 <HAL_DMA_Abort_IT>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003568:	4610      	mov	r0, r2
 800356a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	e00e      	b.n	800358c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f99a 	bl	80038a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	e00a      	b.n	800358c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f996 	bl	80038a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	e006      	b.n	800358c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f992 	bl	80038a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800358a:	e170      	b.n	800386e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	bf00      	nop
    return;
 800358e:	e16e      	b.n	800386e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	2b01      	cmp	r3, #1
 8003596:	f040 814a 	bne.w	800382e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8143 	beq.w	800382e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 813c 	beq.w	800382e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	f040 80b4 	bne.w	8003744 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8140 	beq.w	8003872 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035fa:	429a      	cmp	r2, r3
 80035fc:	f080 8139 	bcs.w	8003872 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003606:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003612:	f000 8088 	beq.w	8003726 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800362c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800364e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800365a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1d9      	bne.n	8003616 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3314      	adds	r3, #20
 8003668:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3314      	adds	r3, #20
 8003682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003686:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800368a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800368e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e1      	bne.n	8003662 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3314      	adds	r3, #20
 80036be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e3      	bne.n	800369e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f6:	f023 0310 	bic.w	r3, r3, #16
 80036fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	330c      	adds	r3, #12
 8003704:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003708:	65ba      	str	r2, [r7, #88]	; 0x58
 800370a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800370e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e3      	bne.n	80036e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fc59 	bl	8001fd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372e:	b29b      	uxth	r3, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8c0 	bl	80038bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800373c:	e099      	b.n	8003872 <HAL_UART_IRQHandler+0x50e>
 800373e:	bf00      	nop
 8003740:	08003a77 	.word	0x08003a77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800374c:	b29b      	uxth	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 808b 	beq.w	8003876 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8086 	beq.w	8003876 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800378e:	647a      	str	r2, [r7, #68]	; 0x44
 8003790:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e3      	bne.n	800376a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3314      	adds	r3, #20
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	623b      	str	r3, [r7, #32]
   return(result);
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037c6:	633a      	str	r2, [r7, #48]	; 0x30
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e3      	bne.n	80037a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800380c:	61fa      	str	r2, [r7, #28]
 800380e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	617b      	str	r3, [r7, #20]
   return(result);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e3      	bne.n	80037e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f848 	bl	80038bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800382c:	e023      	b.n	8003876 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_UART_IRQHandler+0x4ea>
 800383a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f929 	bl	8003a9e <UART_Transmit_IT>
    return;
 800384c:	e014      	b.n	8003878 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00e      	beq.n	8003878 <HAL_UART_IRQHandler+0x514>
 800385a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f969 	bl	8003b3e <UART_EndTransmit_IT>
    return;
 800386c:	e004      	b.n	8003878 <HAL_UART_IRQHandler+0x514>
    return;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_UART_IRQHandler+0x514>
      return;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_UART_IRQHandler+0x514>
      return;
 8003876:	bf00      	nop
  }
}
 8003878:	37e8      	adds	r7, #232	; 0xe8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop

08003880 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b090      	sub	sp, #64	; 0x40
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e4:	e050      	b.n	8003988 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d04c      	beq.n	8003988 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f4:	f7fe f980 	bl	8001bf8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003900:	429a      	cmp	r2, r3
 8003902:	d241      	bcs.n	8003988 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003924:	637a      	str	r2, [r7, #52]	; 0x34
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800392a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e5      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3314      	adds	r3, #20
 800393e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	613b      	str	r3, [r7, #16]
   return(result);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003958:	623a      	str	r2, [r7, #32]
 800395a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	69f9      	ldr	r1, [r7, #28]
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	61bb      	str	r3, [r7, #24]
   return(result);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e00f      	b.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4013      	ands	r3, r2
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d09f      	beq.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3740      	adds	r7, #64	; 0x40
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b095      	sub	sp, #84	; 0x54
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d8:	643a      	str	r2, [r7, #64]	; 0x40
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e5      	bne.n	80039ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d119      	bne.n	8003a5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f023 0310 	bic.w	r3, r3, #16
 8003a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a48:	61ba      	str	r2, [r7, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6979      	ldr	r1, [r7, #20]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	613b      	str	r3, [r7, #16]
   return(result);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a6a:	bf00      	nop
 8003a6c:	3754      	adds	r7, #84	; 0x54
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff ff09 	bl	80038a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b21      	cmp	r3, #33	; 0x21
 8003ab0:	d13e      	bne.n	8003b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aba:	d114      	bne.n	8003ae6 <UART_Transmit_IT+0x48>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d110      	bne.n	8003ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	1c9a      	adds	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]
 8003ae4:	e008      	b.n	8003af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	1c59      	adds	r1, r3, #1
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6211      	str	r1, [r2, #32]
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4619      	mov	r1, r3
 8003b06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10f      	bne.n	8003b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fe8e 	bl	8003880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08c      	sub	sp, #48	; 0x30
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b22      	cmp	r3, #34	; 0x22
 8003b80:	f040 80ab 	bne.w	8003cda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d117      	bne.n	8003bbe <UART_Receive_IT+0x50>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d113      	bne.n	8003bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
 8003bbc:	e026      	b.n	8003c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd0:	d007      	beq.n	8003be2 <UART_Receive_IT+0x74>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <UART_Receive_IT+0x82>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e008      	b.n	8003c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d15a      	bne.n	8003cd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0220 	bic.w	r2, r2, #32
 8003c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d135      	bne.n	8003ccc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	613b      	str	r3, [r7, #16]
   return(result);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f023 0310 	bic.w	r3, r3, #16
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	623a      	str	r2, [r7, #32]
 8003c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	69f9      	ldr	r1, [r7, #28]
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e5      	bne.n	8003c66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d10a      	bne.n	8003cbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fdf9 	bl	80038bc <HAL_UARTEx_RxEventCallback>
 8003cca:	e002      	b.n	8003cd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fde1 	bl	8003894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e002      	b.n	8003cdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3730      	adds	r7, #48	; 0x30
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	b09f      	sub	sp, #124	; 0x7c
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfa:	68d9      	ldr	r1, [r3, #12]
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	ea40 0301 	orr.w	r3, r0, r1
 8003d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d28:	f021 010c 	bic.w	r1, r1, #12
 8003d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d32:	430b      	orrs	r3, r1
 8003d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d42:	6999      	ldr	r1, [r3, #24]
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	ea40 0301 	orr.w	r3, r0, r1
 8003d4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4bc5      	ldr	r3, [pc, #788]	; (8004068 <UART_SetConfig+0x384>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d004      	beq.n	8003d62 <UART_SetConfig+0x7e>
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4bc3      	ldr	r3, [pc, #780]	; (800406c <UART_SetConfig+0x388>)
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d103      	bne.n	8003d6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d62:	f7ff fa0b 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8003d66:	6778      	str	r0, [r7, #116]	; 0x74
 8003d68:	e002      	b.n	8003d70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d6a:	f7ff f9f3 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8003d6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	f040 80b6 	bne.w	8003ee8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7e:	461c      	mov	r4, r3
 8003d80:	f04f 0500 	mov.w	r5, #0
 8003d84:	4622      	mov	r2, r4
 8003d86:	462b      	mov	r3, r5
 8003d88:	1891      	adds	r1, r2, r2
 8003d8a:	6439      	str	r1, [r7, #64]	; 0x40
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d94:	1912      	adds	r2, r2, r4
 8003d96:	eb45 0303 	adc.w	r3, r5, r3
 8003d9a:	f04f 0000 	mov.w	r0, #0
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	00d9      	lsls	r1, r3, #3
 8003da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003da8:	00d0      	lsls	r0, r2, #3
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	1911      	adds	r1, r2, r4
 8003db0:	6639      	str	r1, [r7, #96]	; 0x60
 8003db2:	416b      	adcs	r3, r5
 8003db4:	667b      	str	r3, [r7, #100]	; 0x64
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dcc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003dd0:	f7fc fa08 	bl	80001e4 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4ba5      	ldr	r3, [pc, #660]	; (8004070 <UART_SetConfig+0x38c>)
 8003dda:	fba3 2302 	umull	r2, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	011e      	lsls	r6, r3, #4
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	461c      	mov	r4, r3
 8003de6:	f04f 0500 	mov.w	r5, #0
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	6339      	str	r1, [r7, #48]	; 0x30
 8003df2:	415b      	adcs	r3, r3
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
 8003df6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dfa:	1912      	adds	r2, r2, r4
 8003dfc:	eb45 0303 	adc.w	r3, r5, r3
 8003e00:	f04f 0000 	mov.w	r0, #0
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	00d9      	lsls	r1, r3, #3
 8003e0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e0e:	00d0      	lsls	r0, r2, #3
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	1911      	adds	r1, r2, r4
 8003e16:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e18:	416b      	adcs	r3, r5
 8003e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	1891      	adds	r1, r2, r2
 8003e28:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e2a:	415b      	adcs	r3, r3
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e36:	f7fc f9d5 	bl	80001e4 <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4b8c      	ldr	r3, [pc, #560]	; (8004070 <UART_SetConfig+0x38c>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	; 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3332      	adds	r3, #50	; 0x32
 8003e52:	4a87      	ldr	r2, [pc, #540]	; (8004070 <UART_SetConfig+0x38c>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e60:	441e      	add	r6, r3
 8003e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e64:	4618      	mov	r0, r3
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	1894      	adds	r4, r2, r2
 8003e70:	623c      	str	r4, [r7, #32]
 8003e72:	415b      	adcs	r3, r3
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e7a:	1812      	adds	r2, r2, r0
 8003e7c:	eb41 0303 	adc.w	r3, r1, r3
 8003e80:	f04f 0400 	mov.w	r4, #0
 8003e84:	f04f 0500 	mov.w	r5, #0
 8003e88:	00dd      	lsls	r5, r3, #3
 8003e8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e8e:	00d4      	lsls	r4, r2, #3
 8003e90:	4622      	mov	r2, r4
 8003e92:	462b      	mov	r3, r5
 8003e94:	1814      	adds	r4, r2, r0
 8003e96:	653c      	str	r4, [r7, #80]	; 0x50
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	1891      	adds	r1, r2, r2
 8003ea8:	61b9      	str	r1, [r7, #24]
 8003eaa:	415b      	adcs	r3, r3
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003eb6:	f7fc f995 	bl	80001e4 <__aeabi_uldivmod>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	; (8004070 <UART_SetConfig+0x38c>)
 8003ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	2164      	movs	r1, #100	; 0x64
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	3332      	adds	r3, #50	; 0x32
 8003ed2:	4a67      	ldr	r2, [pc, #412]	; (8004070 <UART_SetConfig+0x38c>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	f003 0207 	and.w	r2, r3, #7
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4432      	add	r2, r6
 8003ee4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee6:	e0b9      	b.n	800405c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eea:	461c      	mov	r4, r3
 8003eec:	f04f 0500 	mov.w	r5, #0
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	1891      	adds	r1, r2, r2
 8003ef6:	6139      	str	r1, [r7, #16]
 8003ef8:	415b      	adcs	r3, r3
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f00:	1912      	adds	r2, r2, r4
 8003f02:	eb45 0303 	adc.w	r3, r5, r3
 8003f06:	f04f 0000 	mov.w	r0, #0
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	00d9      	lsls	r1, r3, #3
 8003f10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f14:	00d0      	lsls	r0, r2, #3
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	eb12 0804 	adds.w	r8, r2, r4
 8003f1e:	eb43 0905 	adc.w	r9, r3, r5
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	008b      	lsls	r3, r1, #2
 8003f36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f3a:	0082      	lsls	r2, r0, #2
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4649      	mov	r1, r9
 8003f40:	f7fc f950 	bl	80001e4 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b49      	ldr	r3, [pc, #292]	; (8004070 <UART_SetConfig+0x38c>)
 8003f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	011e      	lsls	r6, r3, #4
 8003f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f54:	4618      	mov	r0, r3
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	1894      	adds	r4, r2, r2
 8003f60:	60bc      	str	r4, [r7, #8]
 8003f62:	415b      	adcs	r3, r3
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f6a:	1812      	adds	r2, r2, r0
 8003f6c:	eb41 0303 	adc.w	r3, r1, r3
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	f04f 0500 	mov.w	r5, #0
 8003f78:	00dd      	lsls	r5, r3, #3
 8003f7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f7e:	00d4      	lsls	r4, r2, #3
 8003f80:	4622      	mov	r2, r4
 8003f82:	462b      	mov	r3, r5
 8003f84:	1814      	adds	r4, r2, r0
 8003f86:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f88:	414b      	adcs	r3, r1
 8003f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	008b      	lsls	r3, r1, #2
 8003fa0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fa4:	0082      	lsls	r2, r0, #2
 8003fa6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003faa:	f7fc f91b 	bl	80001e4 <__aeabi_uldivmod>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <UART_SetConfig+0x38c>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	2164      	movs	r1, #100	; 0x64
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3332      	adds	r3, #50	; 0x32
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <UART_SetConfig+0x38c>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd2:	441e      	add	r6, r3
 8003fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	1894      	adds	r4, r2, r2
 8003fe2:	603c      	str	r4, [r7, #0]
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fec:	1812      	adds	r2, r2, r0
 8003fee:	eb41 0303 	adc.w	r3, r1, r3
 8003ff2:	f04f 0400 	mov.w	r4, #0
 8003ff6:	f04f 0500 	mov.w	r5, #0
 8003ffa:	00dd      	lsls	r5, r3, #3
 8003ffc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004000:	00d4      	lsls	r4, r2, #3
 8004002:	4622      	mov	r2, r4
 8004004:	462b      	mov	r3, r5
 8004006:	eb12 0a00 	adds.w	sl, r2, r0
 800400a:	eb43 0b01 	adc.w	fp, r3, r1
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	008b      	lsls	r3, r1, #2
 8004022:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004026:	0082      	lsls	r2, r0, #2
 8004028:	4650      	mov	r0, sl
 800402a:	4659      	mov	r1, fp
 800402c:	f7fc f8da 	bl	80001e4 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <UART_SetConfig+0x38c>)
 8004036:	fba3 1302 	umull	r1, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2164      	movs	r1, #100	; 0x64
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	3332      	adds	r3, #50	; 0x32
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <UART_SetConfig+0x38c>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4432      	add	r2, r6
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	377c      	adds	r7, #124	; 0x7c
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	40011000 	.word	0x40011000
 800406c:	40011400 	.word	0x40011400
 8004070:	51eb851f 	.word	0x51eb851f

08004074 <__libc_init_array>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	4d0d      	ldr	r5, [pc, #52]	; (80040ac <__libc_init_array+0x38>)
 8004078:	4c0d      	ldr	r4, [pc, #52]	; (80040b0 <__libc_init_array+0x3c>)
 800407a:	1b64      	subs	r4, r4, r5
 800407c:	10a4      	asrs	r4, r4, #2
 800407e:	2600      	movs	r6, #0
 8004080:	42a6      	cmp	r6, r4
 8004082:	d109      	bne.n	8004098 <__libc_init_array+0x24>
 8004084:	4d0b      	ldr	r5, [pc, #44]	; (80040b4 <__libc_init_array+0x40>)
 8004086:	4c0c      	ldr	r4, [pc, #48]	; (80040b8 <__libc_init_array+0x44>)
 8004088:	f000 f820 	bl	80040cc <_init>
 800408c:	1b64      	subs	r4, r4, r5
 800408e:	10a4      	asrs	r4, r4, #2
 8004090:	2600      	movs	r6, #0
 8004092:	42a6      	cmp	r6, r4
 8004094:	d105      	bne.n	80040a2 <__libc_init_array+0x2e>
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	f855 3b04 	ldr.w	r3, [r5], #4
 800409c:	4798      	blx	r3
 800409e:	3601      	adds	r6, #1
 80040a0:	e7ee      	b.n	8004080 <__libc_init_array+0xc>
 80040a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a6:	4798      	blx	r3
 80040a8:	3601      	adds	r6, #1
 80040aa:	e7f2      	b.n	8004092 <__libc_init_array+0x1e>
 80040ac:	08004224 	.word	0x08004224
 80040b0:	08004224 	.word	0x08004224
 80040b4:	08004224 	.word	0x08004224
 80040b8:	08004228 	.word	0x08004228

080040bc <memset>:
 80040bc:	4402      	add	r2, r0
 80040be:	4603      	mov	r3, r0
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d100      	bne.n	80040c6 <memset+0xa>
 80040c4:	4770      	bx	lr
 80040c6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ca:	e7f9      	b.n	80040c0 <memset+0x4>

080040cc <_init>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr

080040d8 <_fini>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr
